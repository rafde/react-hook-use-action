{"mappings":";;;;;;;AA6HO,SAAS,0CAKf,YAAoD;IAKpD,MAAM,WACL,OAAO,EACP,GAAG;IACJ,MAAM,UAAU,OAAO,aAAa,OAAO,KAAK,cAC7C,YACA;QACD,GAAG,aAAa,OAAO;IACxB;IACD,IAAI,UAA+B;QAClC,SAAS;QACT,SAAS;iBACT;QACA,UAAU;QACV,iBAAiB;IAClB;IACA,IAAI,kBAA4C;QAC/C,GAAG,OAAO;QACV,YAAY,IAAI;IACjB;IACA,MAAM,UAAU,CAAA,GAAA,yCAAc,EAAG,aAAa,OAAO;IAErD,MAAM,cAAc,CAAA,GAAA,yCAAsB,EAKzC,SAAS,aAAc,YAAsF;QAC5G,MAAM,qBAAqB,CAAA,GAAA,wCAAS,EAA2B;qBAC9D;qBACA;6BACA;0BACA;QACD;QAEA,IAAK,uBAAuB,iBAAkB;YAC7C,kBAAkB;YAClB,UAAU;gBACT,SAAS,gBAAgB,OAAO;gBAChC,SAAS,gBAAgB,OAAO;gBAChC,SAAS,gBAAgB,OAAO;gBAChC,UAAU,gBAAgB,QAAQ;gBAClC,iBAAiB,gBAAgB,eAAe;YACjD;QACD;QAEA,YAAY,OAAO,GAAG;QACtB,OAAO;IACR,GACA;IAGD,YAAY,OAAO,GAAG;IAEtB,OAAO;QACN;QACA;KACA;AACF","sources":["src/createCTA.ts"],"sourcesContent":["import type { ActionsRecordProp, } from './types/ActionsRecordProp';\nimport type { CTAHistory, } from './types/CTAHistory';\nimport type { CTAState, } from './types/CTAState';\nimport type { UseCTAParameterActionsOptionalDefaultRecord, } from './types/UseCTAParameterActionsOptionalDefaultRecord';\nimport type { UseCTAParameterActionsRecordProp, } from './types/UseCTAParameterActionsRecordProp';\nimport type { CreateCTAProps, } from './types/CreateCTAProps';\n\nimport type {\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tUseCTAReturnTypeDispatchCTA,\n\tUseCTAReturnTypeDispatch,\n} from './types/UseCTAReturnTypeDispatch';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAParameterAfterActionChange, } from './types/UseCTAParameterAfterActionChange';\n\nimport { compareCallback, } from './internal/compareCallback';\nimport { createDispatchInterface, } from './internal/createDispatchInterface';\nimport ctaReducer, { type CTAReducerState, } from './internal/ctaReducer';\n\n/**\n * A `function` that provides a way to execute like {@link useCTA} but outside a React component.\n *\n * Useful if you want to handle {@link CTAHistory state history} and dispatch using a 3rd party global state management system.\n *\n * @template {CTAState} Initial - The `initial` state type.\n * @template {UseCTAParameterActionsRecordProp} Actions - The actions type.\n *\n * @param {CreateCTAProps} ctaParameter - {@link CreateCTAProps} parameter.\n *\n * @param {CTAState} ctaParameter.initial - initial {@link CTAState} structure for {@link CTAHistory}.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-initial useCTA Parameter: initial}.\n *\n * @param {UseCTAParameterCompare} [ctaParameter.compare] - Optional {@link UseCTAParameterCompare}\n * - `function` for custom equality logic by comparing only specific properties.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-compare useCTA Parameter: compare}\n *\n * @param {UseCTAParameterAfterActionChange} [ctaParameter.afterActionChange] Optional {@link UseCTAParameterAfterActionChange}\n * - `function` than only runs after an action has changed the hook state history.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-after-action-change useCTA Parameter: afterActionChange}\n *\n * @param {UseCTAParameterActionsRecordProp} [ctaParameter.actions] - Optional {@link UseCTAParameterActionsRecordProp}\n * - `object` to define custom and/or overridden actions for state management.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-actions useCTA Parameter: actions}\n *\n * @returns {[CTAHistory, UseCTAReturnTypeDispatch]}  An `array` containing {@link CTAHistory} and {@link UseCTAReturnTypeDispatch} elements:\n *\n * 1. {@link CTAHistory} - An `object` representing the history of hook state changes.\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-0-history useCTA return value [0]: history}\n *\n * 2. {@link UseCTAReturnTypeDispatch} - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch useCTA return value [1]: dispatch}\n * An `function` that returns {@link CTAHistory} and contains the following properties:\n * - {@link CTAHistory history} - A read-only reference to {@link CTAHistory} object.\n *\n * - {@link UseCTAReturnTypeDispatchCTA cta} - Read-only reference `object` to access call-to-action dispatch `function`s.\n * All call-to-action dispatch `functions` return {@link CTAHistory}\n *\n * `cta.update` - Update specific properties of your `current` state while preserving other values.\n *\n * {@link UseCTAReturnTypeDispatchCTA.update} Signature:\n *\n * ```ts\n * const ctaHistory: CTAHistory<CTAState> = cta.update( Partial<CTAState> );\n * const ctaHistory: CTAHistory<CTAState> = cta.update( ( CTAHistory<CTAState> ) => Partial<CTAState> | undefined );\n * const ctaHistory: CTAHistory<CTAState> = cta.update( key: keyof CTAState, value: CTAState[keyof CTAState] );\n * ```\n *\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch-cta-update cta.update docs}\n *\n * `cta.replace` - Replaces all `current` property values with new property values.\n *\n * {@link UseCTAReturnTypeDispatchCTA.replace} Signature:\n *\n * ```ts\n * const ctaHistory: CTAHistory<CTAState> = cta.replace( CTAState );\n * const ctaHistory: CTAHistory<CTAState> = cta.replace( ( CTAHistory<CTAState> ) => CTAState | undefined );\n * ```\n *\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch-cta-replace cta.replace docs}\n *\n * `cta.reset` - Resets the `current` state back to the `initial` state or to synchronize the `current` state and the `initial` state.\n * Resets the `current` state back to the `initial` state or to synchronize the `current` state and the `initial` state.\n *\n * {@link UseCTAReturnTypeDispatchCTA.reset} Signature:\n *\n * ```ts\n * const ctaHistory: CTAHistory<CTAState> = cta.reset();\n * const ctaHistory: CTAHistory<CTAState> = cta.reset( CTAState );\n * const ctaHistory: CTAHistory<CTAState> = cta.reset( ( CTAHistory<CTAState> ) => CTAState | undefined );\n * ```\n *\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch-cta-reset cta.reset docs}\n *\n * `cta.updateInitial` - Lets you update specific properties of `initial` state while preserving other values.\n *\n * {@link UseCTAReturnTypeDispatchCTA.updateInitial} Signature:\n *\n * ```ts\n * const ctaHistory: CTAHistory<CTAState> = cta.updateInitial( Partial<CTAState> )\n * const ctaHistory: CTAHistory<CTAState> = cta.updateInitial( ( CTAHistory<CTAState> ) => Partial<CTAState> | undefined )\n * const ctaHistory: CTAHistory<CTAState> = cta.updateInitial( key: keyof CTAState, value: CTAState[keyof CTAState] )\n * ```\n *\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch-cta-updateInitial cta.updateInitial docs}\n *\n * `cta.replaceInitial` - Replaces all `initial` property values with new property values.\n *\n * {@link UseCTAReturnTypeDispatchCTA.replaceInitial} Signature:\n *\n * ```ts\n * const ctaHistory: CTAHistory<CTAState> = cta.replaceInitial( CTAState )\n * const ctaHistory: CTAHistory<CTAState> = cta.replaceInitial( ( CTAHistory<CTAState> ) => CTAState | undefined )\n * ```\n *\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch-cta-replaceInitial cta.replaceInitial docs}\n *\n * `cta.YourCustomAction` - `YourCustomAction` is a placeholder for the name of a custom action you defined in `useCTAParameter.actions`\n *\n * {@link UseCTAReturnTypeDispatchCTA}.YourCustomAction Signature:\n *\n * ```ts\n * const ctaHistory: CTAHistory<CTAState> = cta.YourCustomAction( ...args );\n * ```\n *\n * See {@link https://rafde.github.io/#use-cta-return-value-1-dispatch-cta-custom-action cta.YourCustomAction docs}\n */\nexport function createCTA<\n\tInitial extends CTAState,\n\tActions extends UseCTAParameterActionsRecordProp<Initial> | undefined,\n\tActionsRecord = Actions extends UseCTAParameterActionsOptionalDefaultRecord<Initial> ? ActionsRecordProp<Initial, Actions> : Actions,\n>(\n\tctaParameter: CreateCTAProps<Initial, ActionsRecord>,\n): [\n\t\tCTAHistory<Initial>,\n\t\tUseCTAReturnTypeDispatch<Initial, ActionsRecord, CTAHistory<Initial>>,\n\t] {\n\tconst {\n\t\tinitial,\n\t} = ctaParameter;\n\tconst actions = typeof ctaParameter.actions === 'undefined'\n\t\t? undefined\n\t\t: {\n\t\t\t...ctaParameter.actions,\n\t\t};\n\tlet history: CTAHistory<Initial> = {\n\t\tchanges: null,\n\t\tcurrent: initial,\n\t\tinitial,\n\t\tprevious: null,\n\t\tpreviousInitial: null,\n\t};\n\tlet ctaReducerState: CTAReducerState<Initial> = {\n\t\t...history,\n\t\tchangesMap: new Map(),\n\t};\n\tconst compare = compareCallback( ctaParameter.compare, );\n\n\tconst ctaCallback = createDispatchInterface<\n\t\tInitial,\n\t\tActionsRecord,\n\t\tCTAHistory<Initial>\n\t>(\n\t\tfunction _ctaCallback( nextCTAProps: Parameters<typeof ctaReducer<Initial, ActionsRecord>>[0]['nextCTAProps'], ) {\n\t\t\tconst newCtaReducerState = ctaReducer<Initial, ActionsRecord>( {\n\t\t\t\tactions,\n\t\t\t\tcompare,\n\t\t\t\tctaReducerState,\n\t\t\t\tnextCTAProps,\n\t\t\t}, );\n\n\t\t\tif ( newCtaReducerState !== ctaReducerState ) {\n\t\t\t\tctaReducerState = newCtaReducerState;\n\t\t\t\thistory = {\n\t\t\t\t\tchanges: ctaReducerState.changes,\n\t\t\t\t\tcurrent: ctaReducerState.current,\n\t\t\t\t\tinitial: ctaReducerState.initial,\n\t\t\t\t\tprevious: ctaReducerState.previous,\n\t\t\t\t\tpreviousInitial: ctaReducerState.previousInitial,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tctaCallback.history = history;\n\t\t\treturn history;\n\t\t},\n\t\tactions,\n\t);\n\n\tctaCallback.history = history;\n\n\treturn [\n\t\thistory,\n\t\tctaCallback,\n\t];\n}\n"],"names":[],"version":3,"file":"createCTA.ff17d4f3.js.map"}