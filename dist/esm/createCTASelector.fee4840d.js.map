{"mappings":";;;;;;;AAgFO,SAAS,0CAMf,KAAqD,EACrD,aAA0E,IAAQ,CAAA,CAAC,CAAA,CAAS;IAE5F,MAAM,oBAAoB,CAAA,GAAA,wCAAY,EACrC;QACC,GAAG,KAAK;QACR,eAAe,CAAE;YAChB,UAAU;YACV,WAAW;gBACV,GAAG,UAAU;0BACb;YACD;YACA,UAAU,OAAO,CAAE,CAAA,WAAY,SAAU;QAC1C;IACD,GACA;IAED,IAAI,WAAE,OAAO,EAAG,GAAG;IACnB,MAAM,YAAE,QAAQ,EAAG,GAAG;IACtB,MAAM,kBAAkB;QACvB,GAAG,OAAO;kBACV;IACD;IACA,IAAI,WAAW;IAEf,SAAS;QACR,OAAO,SAAS,OAAO;IACxB;IAGA,MAAM,YAAY,IAAI;IACtB,SAAS,UAAW,QAAkB;QACrC,UAAU,GAAG,CAAE;QACf,OAAO;YACN,UAAU,MAAM,CAAE;QACnB;IACD;IAEA,SAAS,eAAiC,QAAkC;QAC3E,MAAM,YAAY,CAAA,GAAA,aAAK,EAAgC;QACvD,MAAM,mBAAmB,CAAA,GAAA,kBAAU,EAClC,CAAE;YACD,MAAM,SAAS,SAAU;YACzB,IAAK,CAAC,CAAA,GAAA,sBAAc,EAAG,UAAU,OAAO,EAAE,SACzC,UAAU,OAAO,GAAG;YAErB,OAAO,UAAU,OAAO;QACzB,GACA,uDAAuD;QACvD,EAAE;QAEH,kIAAkI;QAClI,OAAO,CAAA,GAAA,2BAAmB,EACzB,WACA,IAAM,iBAAkB,WACxB,IAAM,SAAU;IAElB;IACA,OAAO,OAAO,MAAM,CACnB,gBACA;kBACC;oBACA;IACD;AAEF","sources":["src/createCTASelector.ts"],"sourcesContent":["import { strictDeepEqual, } from 'fast-equals';\nimport { useCallback, useRef, useSyncExternalStore, } from 'react';\nimport createCTABase from './internal/createCTABase';\n\nimport type { ActionsRecordProp, } from './types/ActionsRecordProp';\nimport type { CreateCTASelectorProps, } from './types/CreateCTASelectorProps';\nimport type { CreateCTASelectorReturn, } from './types/CreateCTASelectorReturn';\nimport type { CTAState, } from './types/CTAState';\nimport type { UseCTAParameterActionsOptionalDefaultRecord, } from './types/UseCTAParameterActionsOptionalDefaultRecord';\nimport type { UseCTAParameterActionsRecordProp, } from './types/UseCTAParameterActionsRecordProp';\nimport type { UseCTAParameterCreateFunc, UseCTAParameterFuncRecord, } from './types/UseCTAParameterFunc';\nimport type { UseCTASelectorListener, } from './types/UseCTASelectorListener';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport { UseCTAReturnTypeDispatch, } from './types/UseCTAReturnTypeDispatch';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { CTAHistory, } from './types/CTAHistory';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAParameterCompare, } from './types/UseCTAParameterCompare';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAParameterAfterActionChange, } from './types/UseCTAParameterAfterActionChange';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAParameterTransform, } from './types/UseCTAParameterTransform';\n\n/**\n * Creates a selector hook for managing state with CTA (Call To Action) pattern\n *\n * @template {CTAState} Initial - The type of the initial state object extending CTAState\n * @template {UseCTAParameterActionsRecordProp<Initial> | undefined} Actions - Optional record of action functions extending UseCTAParameterActionsRecordProp\n * @template GR - Record of getter functions that return values\n * @template ActionsRecord - Derived type for actions, either default or provided actions\n *\n * @param {CreateCTASelectorProps} props - Configuration object for the selector\n *\n * @param {CTAState} props.initial - Initial {@link CTAState} `object` for {@link CTAHistory}.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-initial useCTA Parameter: initial}.\n *\n * @param {UseCTAParameterCompare} [props.compare] - Optional {@link UseCTAParameterCompare}\n * - comparison `function` for custom equality logic by comparing only specific properties.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-compare useCTA Parameter: compare}\n *\n * @param {UseCTAParameterAfterActionChange} [props.afterActionChange] - Optional {@link UseCTAParameterAfterActionChange}\n * - `function` than only runs after an action has changed the hook state history.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-after-action-change useCTA Parameter: afterActionChange}\n *\n * @param {UseCTAParameterTransform} [props.transform] - Optional {@link UseCTAParameterTransform}\n * - A `function` that returns a transformed {@link CTAState} object before a default action evaluates\n * the result of a custom action or overridden default action.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-transform useCTA Parameter: transform}\n *\n * @param {UseCTAParameterActionsRecordProp} [props.actions] - Optional {@link UseCTAParameterActionsRecordProp}\n * - `object` to define custom and/or overridden actions for state management.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-actions useCTA Parameter: actions}\n *\n * @param {UseCTAParameterCreateFunc} [createFunc] - Optional {@link UseCTAParameterCreateFunc}\n * - A `function` callback that receives {@link UseCTAReturnTypeDispatch} and expects an object Record of `function`s to be returned.\n * - @see {@link https://rafde.github.io/react-hook-use-cta/##use-cta-parameter-create-func Params: createFunc}\n *\n * @param {UseCTAReturnTypeDispatch} createFunc.dispatch - The parameter passed to {@link UseCTAParameterCreateFunc}\n * - @see {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch useCTA return value [1]: dispatch}\n *\n * @returns A {@link CreateCTASelectorReturn} selector hook that provides access to dispatch, gets, current, previous, changes, initial, and previousInitial\n *\n * @example\n * const useMySelector = createCTASelector({\n *   initial: { count: 0 },\n *   actions: {\n *     increment: (state) => ({ count: state.current.count + 1 })\n *   }\n * });\n *\n * useMySelector.dispatch.cta.increment();\n *\n * export default function MyView() {\n *   const count = useMySelector(({current}) => current.count);\n *   const increment = useMySelector(({dispatch}) => dispatch.cta.increment);\n *\n  *  return <button onClick={increment}>{count}</div>;\n * }\n */\nexport function createCTASelector<\n\tInitial extends CTAState,\n\tActions extends UseCTAParameterActionsRecordProp<Initial> | undefined,\n\tFR extends UseCTAParameterFuncRecord,\n\tActionsRecord = Actions extends undefined ? UseCTAParameterActionsOptionalDefaultRecord<Initial> : Actions extends UseCTAParameterActionsRecordProp<Initial> ? ActionsRecordProp<Initial, Actions> : never,\n>(\n\tprops: CreateCTASelectorProps<Initial, ActionsRecord>,\n\tcreateFunc: UseCTAParameterCreateFunc<Initial, ActionsRecord, FR, void> = () => ( {} as FR ),\n): CreateCTASelectorReturn<Initial, ActionsRecord, FR> {\n\tconst ctaReducerResults = createCTABase(\n\t\t{\n\t\t\t...props,\n\t\t\tonStateChange: ( newHistory, ) => {\n\t\t\t\thistory = newHistory;\n\t\t\t\tsnapshot = {\n\t\t\t\t\t...newHistory,\n\t\t\t\t\tdispatch,\n\t\t\t\t};\n\t\t\t\tlisteners.forEach( listener => listener( snapshot, ), );\n\t\t\t},\n\t\t},\n\t\tcreateFunc,\n\t);\n\tlet { history, } = ctaReducerResults;\n\tconst { dispatch, } = ctaReducerResults;\n\tconst initialSnapshot = {\n\t\t...history,\n\t\tdispatch,\n\t};\n\tlet snapshot = initialSnapshot;\n\n\tfunction getHistory() {\n\t\treturn dispatch.history;\n\t}\n\n\ttype Listener<SelectorReturn = unknown,> = UseCTASelectorListener<Initial, ActionsRecord, FR, SelectorReturn>;\n\tconst listeners = new Set<Listener>();\n\tfunction subscribe( listener: Listener, ) {\n\t\tlisteners.add( listener, );\n\t\treturn () => {\n\t\t\tlisteners.delete( listener, );\n\t\t};\n\t}\n\n\tfunction useCTASelector<SelectorReturn,>( selector: Listener<SelectorReturn>, ) {\n\t\tconst resultRef = useRef<ReturnType<typeof selector>>( null as SelectorReturn, );\n\t\tconst selectorCallback = useCallback(\n\t\t\t( snapshot: typeof initialSnapshot, ) => {\n\t\t\t\tconst result = selector( snapshot, );\n\t\t\t\tif ( !strictDeepEqual( resultRef.current, result, ) ) {\n\t\t\t\t\tresultRef.current = result;\n\t\t\t\t}\n\t\t\t\treturn resultRef.current;\n\t\t\t},\n\t\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\t\t[],\n\t\t);\n\t\t// @see {@link https://github.com/facebook/react/blob/main/packages/use-sync-external-store/src/useSyncExternalStoreShimClient.js}\n\t\treturn useSyncExternalStore(\n\t\t\tsubscribe,\n\t\t\t() => selectorCallback( snapshot, ),\n\t\t\t() => selector( initialSnapshot, ),\n\t\t);\n\t}\n\treturn Object.assign(\n\t\tuseCTASelector,\n\t\t{\n\t\t\tdispatch,\n\t\t\tgetHistory,\n\t\t},\n\t);\n}\n"],"names":[],"version":3,"file":"createCTASelector.fee4840d.js.map"}