{"mappings":";;;;;;;AAQA,SAAS,4BAIR,eAAyC,EACzC,IAAkD;IAElD,MAAM,aAAa,IAAI;IACvB,IAAK,OAAO,SAAS,YACpB,OAAO;QACN,GAAG,eAAe;oBAClB;IACD;IAGD,MAAM,UAAU,KAAM,gBAAgB,OAAO;IAC7C,OAAO;QACN,GAAG,eAAe;oBAClB;QACA,SAAS;iBACT;IACD;AACD;AAEe,kDAId,MAAyC,EACzC,OAAsD;IAEtD,MAAM,UAAU,CAAA,GAAA,cAAM,EACrB,IAAM,CAAA,GAAA,yCAAc,EAAG,OAAO,OAAO,GACrC,uDAAuD;IACvD,EACC;IAEF,OAAO,CAAA,GAAA,iBAAS,EACf,SAAS,gBACR,eAAyC,EACzC,YAAgF;QAEhF,OAAO,CAAA,GAAA,wCAAS,EAAG;6BAClB;qBACA;0BACA;qBACA;QACD;IACD,GACA;QACC,SAAS;QACT,sFAAsF;QACtF,YAAY;QACZ,SAAS,OAAO,OAAO;QACvB,SAAS,OAAO,OAAO;QACvB,UAAU;QACV,iBAAiB;IAClB,GACA,SAAS,QAAS,eAAyC;QAC1D,OAAO,4BAAyB,iBAAiB,OAAO,MAAM;IAC/D;AAEF","sources":["src/internal/usePrivateCTA.ts"],"sourcesContent":["import { useMemo, useReducer, } from 'react';\nimport { compareCallback, } from './compareCallback';\n\nimport ctaReducer, { CTAReducerState, } from './ctaReducer';\n\nimport type { CTAInitial, } from '../types/CTAInitial';\nimport type { UseCTAParameter, } from '../types/UseCTAParameter';\n\nfunction _init<\n\tInitial extends CTAInitial,\n\tActions,\n>(\n\tprivateCTAState: CTAReducerState<Initial>,\n\tinit?: UseCTAParameter<Initial, Actions>['onInit'],\n): CTAReducerState<Initial> {\n\tconst changesMap = new Map() as CTAReducerState<Initial>['changesMap'];\n\tif ( typeof init !== 'function' ) {\n\t\treturn {\n\t\t\t...privateCTAState,\n\t\t\tchangesMap,\n\t\t};\n\t}\n\n\tconst initial = init( privateCTAState.current, );\n\treturn {\n\t\t...privateCTAState,\n\t\tchangesMap,\n\t\tcurrent: initial,\n\t\tinitial,\n\t};\n}\n\nexport default function usePrivateCTA<\n\tInitial extends CTAInitial,\n\tActions,\n>(\n\tparams: UseCTAParameter<Initial, Actions>,\n\tactions?: UseCTAParameter<Initial, Actions>['actions'],\n) {\n\tconst compare = useMemo(\n\t\t() => compareCallback( params.compare, ),\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\t[\n\t\t],\n\t);\n\treturn useReducer(\n\t\tfunction reducerCallback(\n\t\t\tctaReducerState: CTAReducerState<Initial>,\n\t\t\tnextCTAProps: Parameters<typeof ctaReducer<Initial, Actions>>[0]['nextCTAProps'],\n\t\t) {\n\t\t\treturn ctaReducer( {\n\t\t\t\tctaReducerState,\n\t\t\t\tactions,\n\t\t\t\tnextCTAProps,\n\t\t\t\tcompare,\n\t\t\t}, );\n\t\t},\n\t\t{\n\t\t\tchanges: null,\n\t\t\t// Set changesMap in init to avoid re-instantiating a new Map everytime this is called\n\t\t\tchangesMap: undefined as unknown as CTAReducerState<Initial>['changesMap'],\n\t\t\tcurrent: params.initial,\n\t\t\tinitial: params.initial,\n\t\t\tprevious: null,\n\t\t\tpreviousInitial: null,\n\t\t},\n\t\tfunction _onInit( privateCTAState: CTAReducerState<Initial>, ) {\n\t\t\treturn _init<Initial, Actions>( privateCTAState, params.onInit, );\n\t\t},\n\t);\n}\n\nexport type UsePrivateCTAReturnType<\n\tInitial extends CTAInitial,\n\tActions,\n> = ReturnType<typeof usePrivateCTA<Initial, Actions>>;\n\nexport type UsePrivateCTADispatcher<\n\tInitial extends CTAInitial,\n\tActions,\n> = UsePrivateCTAReturnType<Initial, Actions>[1];\n"],"names":[],"version":3,"file":"usePrivateCTA.8ce65366.js.map"}