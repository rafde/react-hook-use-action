{"mappings":";;;;;;;;;AAWe,kDAMd,MAOC,EACD,UAAuE;IAEvE,MAAM,WACL,OAAO,iBACP,gBAAgB,CAAA,UAAW,SAC3B,GAAG;IACJ,MAAM,UAAU,OAAO,OAAO,OAAO,KAAK,cACvC,YACA;QACD,GAAG,OAAO,OAAO;IAClB;IACD,IAAI,UAA+B,CAAA,GAAA,wCAAe,EAAG;QAAE,SAAS;IAAS;IACzE,IAAI,kBAA4C;QAC/C,GAAG,OAAO;QACV,YAAY;QACZ,cAAc;QACd,YAAY,IAAI;IACjB;IACA,MAAM,UAAU,CAAA,GAAA,wCAAc,EAAG,OAAO,OAAO;IAE/C,MAAM,WAAW,CAAA,GAAA,wCAAsB,EACtC,SAAS,gBAAiB,YAAY;QACrC,MAAM,OAAO,CAAA,GAAA,wCAAS,EAAiC;qBACtD;qBACA;6BACA;0BACA;YACA,WAAW,OAAO,SAAS;QAC5B;QAEA,IAAK,SAAS,iBACb,OAAO,gBAAiB,SAAS;QAGlC,kBAAkB;QAClB,UAAU,CAAA,GAAA,wCAAe,EAAG;QAC5B,SAAS,OAAO,GAAG;QACnB,OAAO,iBAAiB,GAAI,SAAS,gBAAgB,UAAU,EAAE,gBAAgB,YAAY;QAE7F,OAAO,gBAAiB,SAAS;IAClC,GACA,SACA,YACA;IAGD,OAAO;iBACN;kBACA;IACD;AACD","sources":["src/internal/createCTABase.ts"],"sourcesContent":["import { UseCTAParameterAfterActionChange, } from '../types/UseCTAParameterAfterActionChange';\nimport { UseCTAParameterCompare, } from '../types/UseCTAParameterCompare';\nimport type { UseCTAParameterCreateFunc, UseCTAParameterFuncRecord, } from '../types/UseCTAParameterFunc';\nimport type { UseCTAParameterTransform, } from '../types/UseCTAParameterTransform';\nimport compareCallback from './compareCallback';\nimport createDispatchInterface from './createDispatchInterface';\nimport createCTAHistory from './createCTAHistory';\nimport ctaReducer, { type CTAReducerState, } from './ctaReducer';\nimport type { CTAState, } from '../types/CTAState';\nimport type { CTAHistory, } from '../types/CTAHistory';\n\nexport default function createCTABase<\n\tInitial extends CTAState,\n\tActions,\n\tFR extends UseCTAParameterFuncRecord,\n\tReturnType,\n>(\n\tparams: {\n\t\tinitial: Initial\n\t\tactions?: Actions\n\t\tcompare?: UseCTAParameterCompare<Initial>\n\t\ttransform?: UseCTAParameterTransform<Initial>\n\t\tafterActionChange?: UseCTAParameterAfterActionChange<Initial>\n\t\tonStateChange?: ( history: CTAHistory<Initial>, ctaReducerState: CTAReducerState<Initial> ) => ReturnType\n\t},\n\tcreateFunc: UseCTAParameterCreateFunc<Initial, Actions, FR, ReturnType>,\n) {\n\tconst {\n\t\tinitial,\n\t\tonStateChange = history => history,\n\t} = params;\n\tconst actions = typeof params.actions === 'undefined'\n\t\t? undefined\n\t\t: {\n\t\t\t...params.actions,\n\t\t};\n\tlet history: CTAHistory<Initial> = createCTAHistory( { current: initial, }, );\n\tlet ctaReducerState: CTAReducerState<Initial> = {\n\t\t...history,\n\t\tactionType: '' as 'update',\n\t\tcustomAction: undefined,\n\t\tchangesMap: new Map(),\n\t};\n\tconst compare = compareCallback( params.compare, );\n\n\tconst dispatch = createDispatchInterface<Initial, Actions, FR, ReturnType>(\n\t\tfunction ctaBaseCallback( nextCTAProps, ) {\n\t\t\tconst next = ctaReducer<Initial, Actions, ReturnType>( {\n\t\t\t\tactions,\n\t\t\t\tcompare,\n\t\t\t\tctaReducerState,\n\t\t\t\tnextCTAProps,\n\t\t\t\ttransform: params.transform,\n\t\t\t}, );\n\n\t\t\tif ( next === ctaReducerState ) {\n\t\t\t\treturn onStateChange?.( history, ctaReducerState, ) as ReturnType;\n\t\t\t}\n\n\t\t\tctaReducerState = next;\n\t\t\thistory = createCTAHistory( next, );\n\t\t\tdispatch.history = history;\n\t\t\tparams.afterActionChange?.( history, ctaReducerState.actionType, ctaReducerState.customAction, );\n\n\t\t\treturn onStateChange?.( history, ctaReducerState, ) as ReturnType;\n\t\t},\n\t\thistory,\n\t\tcreateFunc,\n\t\tactions,\n\t);\n\n\treturn {\n\t\thistory,\n\t\tdispatch,\n\t};\n}\n"],"names":[],"version":3,"file":"createCTABase.79fb264b.js.map"}