{"mappings":";;;AAgBA,MAAM,+CAAyB;IAC9B,SAAS;IACT,gBAAgB;IAChB,OAAO;IACP,QAAQ;IACR,eAAe;AAChB;AAUA,SAAS,+BACR,IAMC;IAED,MAAM,KACL,CAAC,KACD,CAAC,WACD,OAAO,WACP,OAAO,aACP,SAAS,EACT,GAAG;IACJ,MAAM,aAAa,IAAI;IACvB,IAAI,YAAY;IAChB,IAAM,MAAM,OAAO,QAAU;QAC5B,MAAM,QAAQ,OAAO,CAAE,IAAK;QAE5B,IAAK,CAAC,QAAS,CAAC,CAAE,IAAK,EAAE,OAAO,MAAS;YACxC,YAAY;YACZ,IAAK,CAAC,QAAS,CAAC,CAAE,IAAK,EAAE,OAAO,MAC/B,WAAW,GAAG,CAAE,KAAK,YAAY,CAAC,CAAE,IAAK,GAAG;QAE9C;IACD;IAEA,IAAK,CAAC,WACL;IAED,OAAO;AACR;AAEA,SAAS,sCACR,eAAyC,EACzC,OAAgB,EAChB,OAAkC,EAClC,UAA6B,EAC7B,YAA8B;IAE9B,MAAM,WACL,OAAO,WACP,OAAO,EACP,GAAG;IACJ,MAAM,aAAa,+BAAU;QAC5B,GAAG;QACH,GAAG;iBACH;iBACA;IACD;IAEA,IAAK,CAAC,YACL,OAAO;IAGR,OAAO;QACN,GAAG,eAAe;oBAClB;sBACA;oBACA;QACA,SAAS,WAAW,IAAI,GAAG,OAAO,WAAW,CAAE,cAA8C;QAC7F,SAAS;QACT,UAAU,gBAAgB,OAAO;IAClC;AACD;AAEA,SAAS,sCACR,eAAyC,EACzC,OAAgB,EAChB,OAAkC,EAClC,UAA6B,EAC7B,YAA8B;IAE9B,MAAM,WACL,OAAO,WACP,OAAO,EACP,GAAG;IACJ,MAAM,aAAa,+BAAU;QAC5B,GAAG;QACH,GAAG;iBACH;iBACA;QACA,WAAW;IACZ;IAEA,IAAK,CAAC,YACL,OAAO;IAGR,OAAO;QACN,GAAG,eAAe;oBAClB;sBACA;oBACA;QACA,SAAS,WAAW,IAAI,GAAG,OAAO,WAAW,CAAE,cAA8C;QAC7F,iBAAiB;QACjB,SAAS;IACV;AACD;AAEA,SAAS,8BACR,IAOC;IAED,MAAM,KACL,CAAC,KACD,CAAC,WACD,OAAO,WACP,OAAO,mBACP,eAAe,EACf,GAAG;IACJ,IAAI,YAAY;IAChB,MAAM,OAAgC,CAAC;IACvC,MAAM,aAAa,IAAI,IAAK,KAAK,UAAU;IAE3C,IAAM,MAAM,OAAO,QAAU;QAC5B,MAAM,QAAQ,OAAO,CAAE,IAAK;QAC5B,IAAK,QAAS,CAAC,CAAE,IAAsB,EAAE,OAAO,MAC/C;QAGD,IAAI,CAAE,IAAK,GAAG;QACd,YAAY;QAEZ,MAAM,eAAe,CAAC,CAAE,IAAsB;QAC9C,IAAK,QAAS,cAAc,OAAO,MAClC,WAAW,MAAM,CAAE;aAGnB,WAAW,GAAG,CAAE,KAAK,kBAAkB,CAAC,CAAE,IAAK,GAAG;IAEpD;IAEA,IAAK,CAAC,WACL;IAGD,OAAO;cACN;oBACA;IACD;AACD;AAEA,SAAS,qCACR,eAAyC,EACzC,OAAyB,EACzB,OAAkC,EAClC,UAA6B,EAC7B,YAA8B;IAE9B,MAAM,WACL,OAAO,WACP,OAAO,EACP,GAAG;IACJ,MAAM,aAAa,8BAAS;QAC3B,GAAG;QACH,GAAG;QACH,YAAY,gBAAgB,UAAU;iBACtC;iBACA;QACA,iBAAiB;IAClB;IAEA,IAAK,CAAC,YACL,OAAO;IAER,MAAM,QACL,IAAI,cACJ,UAAU,EACV,GAAG;IAEJ,OAAO;QACN,GAAG,eAAe;oBAClB;sBACA;QACA,SAAS,WAAW,IAAI,GAAG,OAAO,WAAW,CAAE,cAA8C;QAC7F,SAAS;YACR,GAAG,OAAO;YACV,GAAG,IAAI;QACR;QACA,iBAAiB;IAClB;AACD;AAEA,SAAS,qCACR,eAAyC,EACzC,OAAyB,EACzB,OAAkC,EAClC,UAA6B,EAC7B,YAA8B;IAE9B,MAAM,WACL,OAAO,WACP,OAAO,EACP,GAAG;IACJ,MAAM,aAAa,8BAAS;QAC3B,GAAG;QACH,GAAG;QACH,YAAY,gBAAgB,UAAU;iBACtC;iBACA;IACD;IAEA,IAAK,CAAC,YACL,OAAO;IAGR,MAAM,QACL,IAAI,cACJ,UAAU,EACV,GAAG;IACJ,OAAO;QACN,GAAG,eAAe;oBAClB;sBACA;QACA,SAAS,WAAW,IAAI,GAAG,OAAO,WAAW,CAAE,cAA8C;QAC7F,SAAS;YACR,GAAG,OAAO;YACV,GAAG,IAAI;QACR;QACA,UAAU;IACX;AACD;AAEA,SAAS,kCACR,eAAyC,EACzC,IAAa,EACb,OAAkC,EAClC,UAA6B,EAC7B,YAA8B;IAE9B,MAAM,WACL,OAAO,WACP,OAAO,EACP,GAAG;IAEJ,IAAI,sBAAsB;IAC1B,IAAI,sBAAsB;IAC1B,IAAM,MAAM,OAAO,KAAO;QACzB,MAAM,QAAQ,IAAI,CAAE,IAAsB;QAE1C,IAAK,CAAC,QAAS,OAAO,CAAE,IAAsB,EAAE,OAAO,MACtD,sBAAsB;QAGvB,IAAK,CAAC,QAAS,OAAO,CAAE,IAAsB,EAAE,OAAO,MACtD,sBAAsB;QAGvB,IAAK,CAAC,uBAAuB,CAAC,qBAC7B;IAEF;IAEA,IAAK,uBAAuB,qBAC3B,OAAO;IAGR,OAAO;QACN,GAAG,eAAe;oBAClB;sBACA;QACA,YAAY,IAAI;QAChB,SAAS;QACT,SAAS;QACT,SAAS;QACT,UAAU;QACV,iBAAiB,sBAAsB,OAAO;IAC/C;AACD;AAEA,SAAS,iCAKR,KAOC;IAED,MAAM,QACL,IAAI,mBACJ,eAAe,EACf,GAAG;IAEJ,IAAK,QAAQ,QAAQ,MAAM,OAAO,CAAE,SAAW,gBAAgB,CAAA,GAAA,yCAAS,GACvE,OAAO;IAGR,MAAM,QACL,IAAI,WACJ,OAAO,UACP,MAAM,EACN,GAAG;IAEJ,MAAM,kBAAkB,MAAM,SAAS,CACtC,MACA;QACC,SAAS,gBAAgB,OAAO;QAChC,SAAS,gBAAgB,OAAO;QAChC,SAAS,gBAAgB,OAAO;QAChC,UAAU,gBAAgB,QAAQ;QAClC,iBAAiB,gBAAgB,eAAe;QAChD,YAAY;QACZ,cAAc;IACf;IAGD,IAAK,mBAAmB,MACvB,OAAO;IAGR,IAAI;IAEJ,OAAS;QACR,KAAK;YACJ,SAAS,sCACR,iBACA,iBACA,SACA,MACA;YAED;QACD,KAAK;YACJ,SAAS,sCACR,iBACA,iBACA,SACA,MACA;YAED;QACD,KAAK;YACJ,SAAS,kCACR,iBACA,iBACA,SACA,MACA;YAED;QACD,KAAK;YACJ,SAAS,qCACR,iBACA,iBACA,SACA,MACA;YAED;QACD;YACC,SAAS,qCACR,iBACA,iBACA,SACA,MACA;YAED;IACF;IAEA,OAAO;AACR;AAEA,SAAS,oCAEN,aAA2C;IAC7C,IAAK,yBAAyB,CAAA,GAAA,yCAAS,GAAI;QAC1C,MAAM,QACL,IAAI,WACJ,OAAO,qBACP,iBAAiB,EACjB,GAAG;QACJ,MAAM,aAAa,QAAS,mBAAmB;QAE/C,IAAK,MAAM,OAAO,CAAE,UACnB;QAGD,MAAM,aAAa;YAClB,MAAM;kBACN;wBACA;QACD;QAEA,IAAK,SAAS,SAAU;YACvB,IAAK,OAAO,YAAY,aACvB,OAAO;YAGR,IAAK,WAAW,MACf;YAGD,OAAO;QACR;QAEA,IAAK,CAAC,WAAW,OAAO,YAAY,UACnC;QAGD,OAAO;IACR;IAEA,IAAK,iBAAiB,OAAO,kBAAkB,UAC9C,OAAO;QACN,MAAM;QACN,MAAM;QACN,YAAY;IACb;AAEF;AAEA,MAAM,8CAAwB,IAAI;AAClC,SAAS,+CAA8D,OAAsD;IAC5H,IAAK,CAAC,SACL;IAED,IAAK,4CAAsB,GAAG,CAAE,UAC/B,OAAO,4CAAsB,GAAG,CAAE;IAGnC,MAAM,0BAA0B;QAC/B,eAAe,CAAA,GAAA,yCAAsB,EAAG;QACxC,sBAAsB,CAAA,GAAA,wCAA6B,EAAG;QACtD,aAAa,CAAA,GAAA,yCAAoB,EAAG;QACpC,cAAc,CAAA,GAAA,yCAAqB,EAAG;QACtC,qBAAqB,CAAA,GAAA,yCAA4B,EAAG;IACrD;IAEA,4CAAsB,GAAG,CAAE,SAAS;IAEpC,OAAO;AACR;AAEA,MAAM,8BAAmB,EAAE;AAC3B,MAAM,uCAAiB,CAA6B,YAAyB;AAE9D,kDAIZ,MAMF;IACA,MAAM,QACL,OAAO,6BACP,MAAM,MAAM,WACZ,OAAO,EACP,GAAG,OAAO,YAAY;IACvB,MAAM,mBACL,eAAe,WACf,OAAO,WACP,OAAO,aACP,YAAY,sCACZ,GAAG;IACJ,MAAM,WACL,OAAO,WACP,OAAO,EACP,GAAG;IACJ,MAAM,WAAgC;QACrC,SAAS,gBAAgB,OAAO;iBAChC;iBACA;QACA,UAAU,gBAAgB,QAAQ;QAClC,iBAAiB,gBAAgB,eAAe;IACjD;IAEA,MAAM,kBAAkB,WAAW,OAAO,WAAW,YAAY,CAAC,MAAM,OAAO,CAAE;IAEjF,IAAK,UAAU,gDAA4B,CAAA,CAAC,mBAAmB,CAAG,CAAA,UAAU,OAAM,CAAE,GAAM;QACzF,IAAK,mBAAmB,UACvB,OAAO,iCAAY;qBAClB;6BACA;YACA,MAAM,QAAS;YACf,MAAM;uBACN;QACD;QAGD,IAAK,WAAW,WAAW,OAAO,YAAY,aAC7C,OAAO,iCAAY;qBAClB;6BACA;YACA,MAAM;YACN,MAAM;uBACN;QACD;QAGD,OAAO,iCAAY;qBAClB;6BACA;YACA,MAAM;YACN,MAAM;uBACN;QACD;IACD;IAEA,MAAM,MAAM,mBAAmB,OAAQ,CAAE,OAAgC;IAEzE,IAAK,OAAO,QAAQ,YACnB,OAAO;IAGR,IAAI,cAAqC;IAEzC,IAAK,UAAU,8CAAyB;QACvC,IAAK,mBAAmB,UAAW;YAClC,MAAM,uBAAuB,QAC5B;YAGD,IAAK,OAAO,yBAAyB,aACpC,OAAO;YAGR,cAAc;QACf;QAEA,MAAM,OAAO,IACZ,UACA,gBACG;QAGJ,OAAO,iCAAY;qBAClB;6BACA;kBACA;YACA,MAAM;uBACN;QACD;IACD;IAEA,MAAM,YAAY,IACjB,OAAO,MAAM,CAAE,UAAU,+CAA0B,WACnD,gBACG;IAGJ,MAAM,aAAa,oCAAwB;IAE3C,IAAK,CAAC,YACL,OAAO;IAGR,MAAM,QACL,IAAI,QACJ,IAAI,EACJ,GAAG;IAEJ,MAAM,sBAAsB,mBAAmB,OAAQ,CAAE,KAA8B;IAEvF,IAAK,WAAW,UAAU,IAAI,OAAO,wBAAwB,YAC5D,OAAO,iCAAY;gBAClB;iBACA;yBACA;cACA;cACA;mBACA;IACD;IAGD,OAAO,iCAAY;gBAClB;iBACA;yBACA;QACA,MAAM,oBAAqB,UAAU;cACrC;mBACA;IACD;AACD","sources":["src/internal/ctaReducer.ts"],"sourcesContent":["import type { CTAState, } from '../types/CTAState';\nimport type { CTAHistory, } from '../types/CTAHistory';\nimport type { CustomCTAReturnType, } from '../types/CustomCTAReturnType';\nimport type { UseCTAParameter, } from '../types/UseCTAParameter';\nimport type { UseCTAParameterTransform, } from '../types/UseCTAParameterTransform';\nimport type { Dispatch, } from '../types/UseCTAReturnTypeDispatch';\nimport {\n\tActionType,\n\tcreateUpdateInitialActionType,\n\tcreateResetActionType,\n\tcreateUpdateActionType,\n\tcreateReplaceActionType,\n\tcreateReplaceInitialActionType,\n} from './ActionTypes';\nimport type { CompareCallbackReturnType, } from './compareCallback';\n\nconst predefinedActionsConst = {\n\treplace: 'replace',\n\treplaceInitial: 'replaceInitial',\n\treset: 'reset',\n\tupdate: 'update',\n\tupdateInitial: 'updateInitial',\n} as const;\n\ntype PredefinedActions = keyof typeof predefinedActionsConst;\n\nexport type CTAReducerState<Initial extends CTAState,> = CTAHistory<Initial> & {\n\tchangesMap: Map<string | number, unknown>\n\tactionType: PredefinedActions\n\tcustomAction?: string | number\n};\n\nfunction _replace<Initial extends CTAState,>(\n\tprop: {\n\t\tpayload: Initial\n\t\ta: Initial\n\t\tb: Initial\n\t\tcompare: CompareCallbackReturnType\n\t\tuseBValue?: boolean\n\t},\n) {\n\tconst {\n\t\ta,\n\t\tb,\n\t\tcompare,\n\t\tpayload,\n\t\tuseBValue,\n\t} = prop;\n\tconst changesMap = new Map();\n\tlet hasChange = false;\n\tfor ( const key in payload ) {\n\t\tconst value = payload[ key ];\n\n\t\tif ( !compare( a[ key ], value, key, ) ) {\n\t\t\thasChange = true;\n\t\t\tif ( !compare( b[ key ], value, key, ) ) {\n\t\t\t\tchangesMap.set( key, useBValue ? b[ key ] : value, );\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( !hasChange ) {\n\t\treturn;\n\t}\n\treturn changesMap;\n}\n\nfunction _replaceCurrent<Initial extends CTAState,>(\n\tctaReducerState: CTAReducerState<Initial>,\n\tpayload: Initial,\n\tcompare: CompareCallbackReturnType,\n\tactionType: PredefinedActions,\n\tcustomAction?: string | number,\n): CTAReducerState<Initial> {\n\tconst {\n\t\tinitial,\n\t\tcurrent,\n\t} = ctaReducerState;\n\tconst changesMap = _replace( {\n\t\ta: current,\n\t\tb: initial,\n\t\tcompare,\n\t\tpayload,\n\t}, );\n\n\tif ( !changesMap ) {\n\t\treturn ctaReducerState;\n\t}\n\n\treturn {\n\t\t...ctaReducerState,\n\t\tactionType,\n\t\tcustomAction,\n\t\tchangesMap,\n\t\tchanges: changesMap.size ? Object.fromEntries( changesMap, ) as Readonly<Partial<Initial>> : null,\n\t\tcurrent: payload,\n\t\tprevious: ctaReducerState.current,\n\t};\n}\n\nfunction _replaceInitial<Initial extends CTAState,>(\n\tctaReducerState: CTAReducerState<Initial>,\n\tpayload: Initial,\n\tcompare: CompareCallbackReturnType,\n\tactionType: PredefinedActions,\n\tcustomAction?: string | number,\n): CTAReducerState<Initial> {\n\tconst {\n\t\tinitial,\n\t\tcurrent,\n\t} = ctaReducerState;\n\tconst changesMap = _replace( {\n\t\ta: initial,\n\t\tb: current,\n\t\tcompare,\n\t\tpayload,\n\t\tuseBValue: true,\n\t}, );\n\n\tif ( !changesMap ) {\n\t\treturn ctaReducerState;\n\t}\n\n\treturn {\n\t\t...ctaReducerState,\n\t\tactionType,\n\t\tcustomAction,\n\t\tchangesMap,\n\t\tchanges: changesMap.size ? Object.fromEntries( changesMap, ) as Readonly<Partial<Initial>> : null,\n\t\tpreviousInitial: initial,\n\t\tinitial: payload,\n\t};\n}\n\nfunction _update<Initial extends CTAState,>(\n\tprop: {\n\t\ta: Initial\n\t\tb: Initial\n\t\tchangesMap: CTAReducerState<Initial>['changesMap']\n\t\tcompare: CompareCallbackReturnType\n\t\tpayload: Initial\n\t\tuseCompareValue?: boolean\n\t},\n) {\n\tconst {\n\t\ta,\n\t\tb,\n\t\tcompare,\n\t\tpayload,\n\t\tuseCompareValue,\n\t} = prop;\n\tlet hasChange = false;\n\tconst next: Record<string, unknown> = {};\n\tconst changesMap = new Map( prop.changesMap, );\n\n\tfor ( const key in payload ) {\n\t\tconst value = payload[ key ];\n\t\tif ( compare( a[ key as keyof Initial ], value, key, ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tnext[ key ] = value;\n\t\thasChange = true;\n\n\t\tconst compareValue = b[ key as keyof Initial ];\n\t\tif ( compare( compareValue, value, key, ) ) {\n\t\t\tchangesMap.delete( key, );\n\t\t}\n\t\telse {\n\t\t\tchangesMap.set( key, useCompareValue ? b[ key ] : value, );\n\t\t}\n\t}\n\n\tif ( !hasChange ) {\n\t\treturn;\n\t}\n\n\treturn {\n\t\tnext,\n\t\tchangesMap,\n\t};\n}\n\nfunction _updateInitial<Initial extends CTAState,>(\n\tctaReducerState: CTAReducerState<Initial>,\n\tpayload: Partial<Initial>,\n\tcompare: CompareCallbackReturnType,\n\tactionType: PredefinedActions,\n\tcustomAction?: string | number,\n): CTAReducerState<Initial> {\n\tconst {\n\t\tcurrent,\n\t\tinitial,\n\t} = ctaReducerState;\n\tconst nextUpdate = _update( {\n\t\ta: initial,\n\t\tb: current,\n\t\tchangesMap: ctaReducerState.changesMap,\n\t\tcompare,\n\t\tpayload,\n\t\tuseCompareValue: true,\n\t}, );\n\n\tif ( !nextUpdate ) {\n\t\treturn ctaReducerState;\n\t}\n\tconst {\n\t\tnext,\n\t\tchangesMap,\n\t} = nextUpdate;\n\n\treturn {\n\t\t...ctaReducerState,\n\t\tactionType,\n\t\tcustomAction,\n\t\tchanges: changesMap.size ? Object.fromEntries( changesMap, ) as Readonly<Partial<Initial>> : null,\n\t\tinitial: {\n\t\t\t...initial,\n\t\t\t...next,\n\t\t},\n\t\tpreviousInitial: initial,\n\t};\n}\n\nfunction _updateCurrent<Initial extends CTAState,>(\n\tctaReducerState: CTAReducerState<Initial>,\n\tpayload: Partial<Initial>,\n\tcompare: CompareCallbackReturnType,\n\tactionType: PredefinedActions,\n\tcustomAction?: string | number,\n): CTAReducerState<Initial> {\n\tconst {\n\t\tcurrent,\n\t\tinitial,\n\t} = ctaReducerState;\n\tconst nextUpdate = _update( {\n\t\ta: current,\n\t\tb: initial,\n\t\tchangesMap: ctaReducerState.changesMap,\n\t\tcompare,\n\t\tpayload,\n\t}, );\n\n\tif ( !nextUpdate ) {\n\t\treturn ctaReducerState;\n\t}\n\n\tconst {\n\t\tnext,\n\t\tchangesMap,\n\t} = nextUpdate;\n\treturn {\n\t\t...ctaReducerState,\n\t\tactionType,\n\t\tcustomAction,\n\t\tchanges: changesMap.size ? Object.fromEntries( changesMap, ) as Readonly<Partial<Initial>> : null,\n\t\tcurrent: {\n\t\t\t...current,\n\t\t\t...next,\n\t\t},\n\t\tprevious: current,\n\t};\n}\n\nfunction _resetState<Initial extends CTAState, >(\n\tctaReducerState: CTAReducerState<Initial>,\n\tnext: Initial,\n\tcompare: CompareCallbackReturnType,\n\tactionType: PredefinedActions,\n\tcustomAction?: string | number,\n) {\n\tconst {\n\t\tcurrent,\n\t\tinitial,\n\t} = ctaReducerState;\n\n\tlet isNextSameAsInitial = true;\n\tlet isNextSameAsCurrent = true;\n\tfor ( const key in next ) {\n\t\tconst value = next[ key as keyof Initial ];\n\n\t\tif ( !compare( initial[ key as keyof Initial ], value, key, ) ) {\n\t\t\tisNextSameAsInitial = false;\n\t\t}\n\n\t\tif ( !compare( current[ key as keyof Initial ], value, key, ) ) {\n\t\t\tisNextSameAsCurrent = false;\n\t\t}\n\n\t\tif ( !isNextSameAsInitial && !isNextSameAsCurrent ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif ( isNextSameAsInitial && isNextSameAsCurrent ) {\n\t\treturn ctaReducerState;\n\t}\n\n\treturn {\n\t\t...ctaReducerState,\n\t\tactionType,\n\t\tcustomAction,\n\t\tchangesMap: new Map(),\n\t\tchanges: null,\n\t\tinitial: next as Initial,\n\t\tcurrent: next as Initial,\n\t\tprevious: current,\n\t\tpreviousInitial: isNextSameAsInitial ? null : initial,\n\t};\n}\n\nfunction typeResult<\n\tInitial extends CTAState,\n\tType extends PredefinedActions,\n\tNext = Type extends 'update' | 'updateInitial' ? Partial<Initial> : Initial,\n>(\n\tparam: {\n\t\taction?: unknown\n\t\tcompare: CompareCallbackReturnType\n\t\tctaReducerState: CTAReducerState<Initial>\n\t\tnext: Next\n\t\ttransform: UseCTAParameterTransform<Initial>\n\t\ttype: Type\n\t},\n) {\n\tconst {\n\t\tnext,\n\t\tctaReducerState,\n\t} = param;\n\n\tif ( next == null || Array.isArray( next, ) || next instanceof ActionType ) {\n\t\treturn ctaReducerState;\n\t}\n\n\tconst {\n\t\ttype,\n\t\tcompare,\n\t\taction,\n\t} = param;\n\n\tconst transformedNext = param.transform(\n\t\tnext,\n\t\t{\n\t\t\tchanges: ctaReducerState.changes,\n\t\t\tcurrent: ctaReducerState.current,\n\t\t\tinitial: ctaReducerState.initial,\n\t\t\tprevious: ctaReducerState.previous,\n\t\t\tpreviousInitial: ctaReducerState.previousInitial,\n\t\t\tactionType: type,\n\t\t\tcustomAction: action as string | number,\n\t\t},\n\t);\n\n\tif ( transformedNext == null ) {\n\t\treturn ctaReducerState;\n\t}\n\n\tlet result;\n\n\tswitch ( type ) {\n\t\tcase 'replace':\n\t\t\tresult = _replaceCurrent(\n\t\t\t\tctaReducerState,\n\t\t\t\ttransformedNext as Initial,\n\t\t\t\tcompare,\n\t\t\t\ttype,\n\t\t\t\taction as string | number,\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'replaceInitial':\n\t\t\tresult = _replaceInitial(\n\t\t\t\tctaReducerState,\n\t\t\t\ttransformedNext as Initial,\n\t\t\t\tcompare,\n\t\t\t\ttype,\n\t\t\t\taction as string | number,\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'reset':\n\t\t\tresult = _resetState(\n\t\t\t\tctaReducerState,\n\t\t\t\ttransformedNext as Initial,\n\t\t\t\tcompare,\n\t\t\t\ttype,\n\t\t\t\taction as string | number,\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'updateInitial':\n\t\t\tresult = _updateInitial(\n\t\t\t\tctaReducerState,\n\t\t\t\ttransformedNext,\n\t\t\t\tcompare,\n\t\t\t\ttype,\n\t\t\t\taction as string | number,\n\t\t\t);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tresult = _updateCurrent(\n\t\t\t\tctaReducerState,\n\t\t\t\ttransformedNext,\n\t\t\t\tcompare,\n\t\t\t\ttype,\n\t\t\t\taction as string | number,\n\t\t\t);\n\t\t\tbreak;\n\t}\n\n\treturn result;\n}\n\nfunction getActionType<\n\tInitial extends CTAState,\n>( ctaReturnType: CustomCTAReturnType<Initial>, ) {\n\tif ( ctaReturnType instanceof ActionType ) {\n\t\tconst {\n\t\t\ttype,\n\t\t\tpayload,\n\t\t\tactionTypeOptions,\n\t\t} = ctaReturnType;\n\t\tconst useDefault = Boolean( actionTypeOptions?.useDefault, );\n\n\t\tif ( Array.isArray( payload, ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst actionType = {\n\t\t\tnext: payload,\n\t\t\ttype,\n\t\t\tuseDefault,\n\t\t};\n\n\t\tif ( type === 'reset' ) {\n\t\t\tif ( typeof payload === 'undefined' ) {\n\t\t\t\treturn actionType;\n\t\t\t}\n\n\t\t\tif ( payload == null ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn actionType;\n\t\t}\n\n\t\tif ( !payload || typeof payload !== 'object' ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn actionType;\n\t}\n\n\tif ( ctaReturnType && typeof ctaReturnType === 'object' ) {\n\t\treturn {\n\t\t\tnext: ctaReturnType as Partial<Initial>,\n\t\t\ttype: 'update' as Extract<PredefinedActions, 'update'>,\n\t\t\tuseDefault: false,\n\t\t};\n\t}\n}\n\nconst customCTAHistoryCache = new WeakMap<Record<string | number, unknown>>();\nfunction getCustomCTAHistoryCache<Initial extends CTAState, Actions,>( actions?: UseCTAParameter<Initial, Actions>['actions'], ) {\n\tif ( !actions ) {\n\t\treturn;\n\t}\n\tif ( customCTAHistoryCache.has( actions, ) ) {\n\t\treturn customCTAHistoryCache.get( actions, );\n\t}\n\n\tconst customCTAHistoryActions = {\n\t\treplaceAction: createReplaceActionType( actions, ),\n\t\treplaceInitialAction: createReplaceInitialActionType( actions, ),\n\t\tresetAction: createResetActionType( actions, ),\n\t\tupdateAction: createUpdateActionType( actions, ),\n\t\tupdateInitialAction: createUpdateInitialActionType( actions, ),\n\t};\n\n\tcustomCTAHistoryCache.set( actions, customCTAHistoryActions, );\n\n\treturn customCTAHistoryActions;\n}\n\nconst _args: unknown[] = [];\nconst _noopTransform = <Initial extends CTAState,>( nextState: Initial, ) => nextState;\n\nexport default function ctaReducer<\n\tInitial extends CTAState,\n\tActions,\n\tReturnType,\n>( params: {\n\tactions?: UseCTAParameter<Initial, Actions>['actions']\n\tcompare: CompareCallbackReturnType\n\tctaReducerState: CTAReducerState<Initial>\n\tnextCTAProps: Parameters<Dispatch<Initial, Actions, ReturnType>>[0]\n\ttransform?: UseCTAParameterTransform<Initial>\n}, ): CTAReducerState<Initial> {\n\tconst {\n\t\targs = _args,\n\t\ttype: action,\n\t\tpayload,\n\t} = params.nextCTAProps;\n\tconst {\n\t\tctaReducerState,\n\t\tactions,\n\t\tcompare,\n\t\ttransform = _noopTransform as UseCTAParameterTransform<Initial>,\n\t} = params;\n\tconst {\n\t\tcurrent,\n\t\tinitial,\n\t} = ctaReducerState;\n\tconst ctaState: CTAHistory<Initial> = {\n\t\tchanges: ctaReducerState.changes,\n\t\tcurrent,\n\t\tinitial,\n\t\tprevious: ctaReducerState.previous,\n\t\tpreviousInitial: ctaReducerState.previousInitial,\n\t};\n\n\tconst isActionsObject = actions && typeof actions == 'object' && !Array.isArray( actions, );\n\n\tif ( action in predefinedActionsConst && ( !isActionsObject || !( action in actions ) ) ) {\n\t\tif ( payload instanceof Function ) {\n\t\t\treturn typeResult( {\n\t\t\t\tcompare,\n\t\t\t\tctaReducerState,\n\t\t\t\tnext: payload( ctaState, ),\n\t\t\t\ttype: action as PredefinedActions,\n\t\t\t\ttransform,\n\t\t\t}, );\n\t\t}\n\n\t\tif ( action === 'reset' && typeof payload === 'undefined' ) {\n\t\t\treturn typeResult( {\n\t\t\t\tcompare,\n\t\t\t\tctaReducerState,\n\t\t\t\tnext: initial,\n\t\t\t\ttype: 'reset',\n\t\t\t\ttransform,\n\t\t\t}, );\n\t\t}\n\n\t\treturn typeResult( {\n\t\t\tcompare,\n\t\t\tctaReducerState,\n\t\t\tnext: payload,\n\t\t\ttype: action as PredefinedActions,\n\t\t\ttransform,\n\t\t}, );\n\t}\n\n\tconst cta = isActionsObject && actions![ action as keyof typeof actions ];\n\n\tif ( typeof cta !== 'function' ) {\n\t\treturn ctaReducerState;\n\t}\n\n\tlet nextPayload: typeof payload | null = payload;\n\n\tif ( action in predefinedActionsConst ) {\n\t\tif ( payload instanceof Function ) {\n\t\t\tconst nextCTAPayloadResult = payload(\n\t\t\t\tctaState,\n\t\t\t);\n\n\t\t\tif ( typeof nextCTAPayloadResult === 'undefined' ) {\n\t\t\t\treturn ctaReducerState;\n\t\t\t}\n\n\t\t\tnextPayload = nextCTAPayloadResult;\n\t\t}\n\n\t\tconst next = cta(\n\t\t\tctaState,\n\t\t\tnextPayload,\n\t\t\t...args,\n\t\t);\n\n\t\treturn typeResult( {\n\t\t\tcompare,\n\t\t\tctaReducerState,\n\t\t\tnext,\n\t\t\ttype: action as PredefinedActions,\n\t\t\ttransform,\n\t\t}, );\n\t}\n\n\tconst nextState = cta(\n\t\tObject.assign( ctaState, getCustomCTAHistoryCache( actions, ), ),\n\t\tnextPayload,\n\t\t...args,\n\t);\n\n\tconst actionType = getActionType<Initial>( nextState, );\n\n\tif ( !actionType ) {\n\t\treturn ctaReducerState;\n\t}\n\n\tconst {\n\t\ttype,\n\t\tnext,\n\t} = actionType;\n\n\tconst customPredefinedCTA = isActionsObject && actions![ type as keyof typeof actions ];\n\n\tif ( actionType.useDefault || typeof customPredefinedCTA !== 'function' ) {\n\t\treturn typeResult( {\n\t\t\taction,\n\t\t\tcompare,\n\t\t\tctaReducerState,\n\t\t\tnext,\n\t\t\ttype,\n\t\t\ttransform,\n\t\t}, );\n\t}\n\n\treturn typeResult( {\n\t\taction,\n\t\tcompare,\n\t\tctaReducerState,\n\t\tnext: customPredefinedCTA( ctaState, next, ),\n\t\ttype,\n\t\ttransform,\n\t}, );\n}\n"],"names":[],"version":3,"file":"ctaReducer.2c7c7d4d.js.map"}