{"mappings":";;;;;;;AAuJO,SAAS,0CAMf,KAAwC,EACxC,aAAoE,IAAQ,CAAA,CAAC,CAAA,CAAS;IAGtF,MAAM,oBAAoB,CAAA,GAAA,oBAAY,EACrC,CAAA,GAAA,wCAAe,EAAG;QAAE,SAAS,MAAM,OAAO;IAAE;IAE7C,MAAM,qBAAqB,CAAA,GAAA,oBAAY,EAAyB;IAEhE,OAAO;QACN,aAAa,WACZ,UAAU,MAAM,OAAO,UACvB,SAAS,MAAM,MAAM,WACrB,UAAU,MAAM,OAAO,qBACvB,oBAAoB,MAAM,iBAAiB,YAC3C,QAAQ,aACR,YAAY,MAAM,SAAS,EAC3B;YACA,MAAM,CACL,OACA,SACA,GAAG,CAAA,GAAA,yCAAK,EACR;gBACC,SAAS,MAAM,OAAO;mCACtB;yBACA;yBACA;wBACA;2BACA;YACD,GACA;YAGD,OAAO,CAAA,GAAA,oBAAY,EAClB,kBAAkB,QAAQ,EAC1B;uBAAE;YAAO,GACT,CAAA,GAAA,oBAAY,EACX,mBAAmB,QAAQ,EAC3B;gBACC,OAAO;YACR,GACA;QAGH;QACA;YACC,MAAM,qBAAqB,CAAA,GAAA,iBAAS,EAAG;YACvC,IAAK,sBAAsB,MAAO;gBACjC,QAAQ,KAAK,CAAE;gBACf,OAAO;YACR;YAEA,OAAO;QACR;QACA;YACC,OAAO,CAAA,GAAA,iBAAS,EAAG;QACpB;IACD;AACD","sources":["src/createCTAContext.ts"],"sourcesContent":["import {\n\tcreateContext,\n\tuseContext,\n\tcreateElement,\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\n\ttype Context,\n} from 'react';\nimport createCTAHistory from './internal/createCTAHistory';\nimport type { ActionsRecordProp, } from './types/ActionsRecordProp';\nimport type { CreateCTAContextReturn, } from './types/CreateCTAContextReturn';\nimport type { CTAState, } from './types/CTAState';\nimport type { UseCTAParameter, } from './types/UseCTAParameter';\nimport type { UseCTAParameterActionsOptionalDefaultRecord, } from './types/UseCTAParameterActionsOptionalDefaultRecord';\nimport type { UseCTAParameterActionsRecordProp, } from './types/UseCTAParameterActionsRecordProp';\nimport type { UseCTAParameterCreateFunc, UseCTAParameterFuncRecord, } from './types/UseCTAParameterFunc';\nimport type { UseCTAReturnType, } from './types/UseCTAReturnType';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { CTAHistory, } from './types/CTAHistory';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAReturnTypeDispatch, } from './types/UseCTAReturnTypeDispatch';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAParameterCompare, } from './types/UseCTAParameterCompare';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAParameterOnInit, } from './types/UseCTAParameterOnInit';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAParameterAfterActionChange, } from './types/UseCTAParameterAfterActionChange';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAParameterTransform, } from './types/UseCTAParameterTransform';\n\nimport { useCTA, } from './useCTA';\n\n/**\n * A `function` that returns a React Context to use with {@link useCTA}\n * for managing {@link CTAHistory state history} and {@link UseCTAReturnTypeDispatch dispatch} in a React {@link Context.Provider}.\n *\n * This handles the boilerplate of creating a React Context and Provider.\n * @see {@link https://react.dev/learn/scaling-up-with-reducer-and-context#moving-all-wiring-into-a-single-file}\n *\n * @template {CTAState} Initial - The initial state type.\n * @template {UseCTAParameterActionsRecordProp} Actions - The actions type.\n *\n * @param {UseCTAParameter} props - {@link UseCTAParameter}.\n *\n * @param {CTAState} props.initial - initial {@link CTAState} structure for {@link CTAHistory}.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-initial useCTA Parameter: initial}.\n *\n * @param {UseCTAParameterOnInit} [props.onInit] - Optional {@link UseCTAParameterOnInit}\n * - `function` for handling `initial` parameter on component mount.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-on-init useCTA Parameter: onInit}\n *\n * @param {UseCTAParameterCompare} [props.compare] - Optional {@link UseCTAParameterCompare}\n * - `function` for custom equality logic by comparing only specific properties.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-compare useCTA Parameter: compare}\n *\n * @param {UseCTAParameterAfterActionChange} [props.afterActionChange] Optional {@link UseCTAParameterAfterActionChange}\n * - `function` than only runs after an action has changed the hook state history.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-after-action-change useCTA Parameter: afterActionChange}\n *\n * @param {UseCTAParameterTransform} [props.transform] - Optional {@link UseCTAParameterTransform}\n * - A `function` that returns a transformed {@link CTAState} object before a default action evaluates\n * the result of a custom action or overridden default action.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-transform useCTA Parameter: transform}\n *\n * @param {UseCTAParameterActionsRecordProp} [props.actions] - Optional {@link UseCTAParameterActionsRecordProp}\n * - `object` to define custom and/or overridden actions for state management.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-actions useCTA Parameter: actions}\n *\n * @param {UseCTAParameterCreateFunc} [createFunc] - Optional {@link UseCTAParameterCreateFunc}\n * - A `function` callback that receives {@link UseCTAReturnTypeDispatch} and expects an object Record of `function`s to be returned.\n * - @see {@link https://rafde.github.io/react-hook-use-cta/##use-cta-parameter-create-func Params: createFunc}\n *\n * @param {UseCTAReturnTypeDispatch} createFunc.dispatch - The parameter passed to {@link UseCTAParameterCreateFunc}\n *\n * @returns {CreateCTAContextReturn} A {@link CreateCTAContextReturn} object. See {@link https://rafde.github.io/react-hook-use-cta/#create-cta-context-return createCTAContext return value}.\n * Has the following properties:\n * - {@link CreateCTAContextReturn.CTAProvider} - component that requires `children` prop.\n * Also accepts optional `initial`, `onInit`, and `compare` props.\n * - {@link CreateCTAContextReturn.useCTAHistoryContext} - A hook for returning {@link CTAHistory} from context.\n * - {@link CreateCTAContextReturn.useCTADispatchContext} - A hook for returning {@link UseCTAReturnTypeDispatch} from context to make call-to-actions.\n * Returns `null` if called outside the `CTAProvider`.\n *\n * `useCTADispatchContext()?.update` - Update specific properties of your `current` state while preserving other values.\n *\n * {@link UseCTAReturnTypeDispatchCTA.update} Signature:\n *\n * ```ts\n * useCTADispatchContext()?.update( Partial<CTAState> );\n * useCTADispatchContext()?.update( ( CTAHistory<CTAState> ) => Partial<CTAState> | undefined );\n * useCTADispatchContext()?.update( key: keyof CTAState, value: CTAState[keyof CTAState] );\n * ```\n *\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch-cta-update cta.update docs}\n *\n * `useCTADispatchContext()?.replace` - Replaces all `current` property values with new property values.\n *\n * {@link UseCTAReturnTypeDispatchCTA.replace} Signature:\n *\n * ```ts\n * useCTADispatchContext()?.replace( Partial<CTAState> )\n * useCTADispatchContext()?.replace( ( CTAHistory<CTAState> ) => Partial<CTAState> | undefined )\n * ```\n *\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch-cta-replace cta.replace docs}\n *\n * `useCTADispatchContext()?.reset` - Resets the `current` state back to the `initial` state or to synchronize the `current` state and the `initial` state.\n * Resets the `current` state back to the `initial` state or to synchronize the `current` state and the `initial` state.\n *\n * {@link UseCTAReturnTypeDispatchCTA.reset} Signature:\n *\n * ```ts\n * useCTADispatchContext()?.reset();\n * useCTADispatchContext()?.reset( CTAState );\n * useCTADispatchContext()?.reset( ( CTAHistory<CTAState> ) => CTAState | undefined );\n * ```\n *\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch-cta-reset cta.reset docs}\n *\n * `useCTADispatchContext()?.updateInitial` - Lets you update specific properties of `initial` state while preserving other values.\n *\n * {@link UseCTAReturnTypeDispatchCTA.updateInitial} Signature:\n *\n * ```ts\n * useCTADispatchContext()?.updateInitial( Partial<CTAState> );\n * useCTADispatchContext()?.updateInitial( ( CTAHistory<CTAState> ) => Partial<CTAState> | undefined );\n * useCTADispatchContext()?.updateInitial( key: keyof CTAState, value: CTAState[keyof CTAState] );\n * ```\n *\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch-cta-updateInitial cta.updateInitial docs}\n *\n * `useCTADispatchContext()?.replaceInitial` - Replaces all `initial` property values with new property values.\n *\n * {@link UseCTAReturnTypeDispatchCTA.replaceInitial} Signature:\n *\n * ```ts\n * useCTADispatchContext()?.replaceInitial( CTAState );\n * useCTADispatchContext()?.replaceInitial( ( CTAHistory<CTAState> ) => CTAState | undefined );\n * ```\n *\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch-cta-replaceInitial cta.replaceInitial docs}\n *\n * `useCTADispatchContext()?.YourCustomAction` - `YourCustomAction` is a placeholder for the name of a custom action you defined in `useCTAParameter.actions`\n *\n * {@link UseCTAReturnTypeDispatchCTA}.YourCustomAction Signature:\n *\n * ```ts\n * useCTADispatchContext()?.YourCustomAction( ...args );\n * ```\n *\n * See {@link https://rafde.github.io/#use-cta-return-value-1-dispatch-cta-custom-action cta.YourCustomAction docs}\n */\nexport function createCTAContext<\n\tInitial extends CTAState,\n\tActions extends UseCTAParameterActionsRecordProp<Initial> | undefined,\n\tFR extends UseCTAParameterFuncRecord,\n\tActionsRecord = Actions extends undefined ? UseCTAParameterActionsOptionalDefaultRecord<Initial> : Actions extends UseCTAParameterActionsRecordProp<Initial> ? ActionsRecordProp<Initial, Actions> : never,\n>(\n\tprops: UseCTAParameter<Initial, Actions>,\n\tcreateFunc: UseCTAParameterCreateFunc<Initial, Actions, FR, void> = () => ( {} as FR ),\n): CreateCTAContextReturn<Initial, ActionsRecord, FR > {\n\ttype ReturnType = UseCTAReturnType<Initial, ActionsRecord, FR, void>;\n\tconst CTAContextHistory = createContext<ReturnType[0]>(\n\t\tcreateCTAHistory( { current: props.initial, }, ),\n\t);\n\tconst CTAContextDispatch = createContext<ReturnType[1] | null>( null, );\n\n\treturn {\n\t\tCTAProvider( {\n\t\t\tinitial = props.initial,\n\t\t\tonInit = props.onInit,\n\t\t\tcompare = props.compare,\n\t\t\tafterActionChange = props.afterActionChange,\n\t\t\tchildren,\n\t\t\ttransform = props.transform,\n\t\t}, ) {\n\t\t\tconst [\n\t\t\t\tvalue,\n\t\t\t\tdispatch,\n\t\t\t] = useCTA(\n\t\t\t\t{\n\t\t\t\t\tactions: props.actions,\n\t\t\t\t\tafterActionChange,\n\t\t\t\t\tcompare,\n\t\t\t\t\tinitial,\n\t\t\t\t\tonInit,\n\t\t\t\t\ttransform,\n\t\t\t\t},\n\t\t\t\tcreateFunc,\n\t\t\t);\n\n\t\t\treturn createElement(\n\t\t\t\tCTAContextHistory.Provider,\n\t\t\t\t{ value, },\n\t\t\t\tcreateElement(\n\t\t\t\t\tCTAContextDispatch.Provider,\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: dispatch as unknown as ReturnType[1],\n\t\t\t\t\t},\n\t\t\t\t\tchildren,\n\t\t\t\t),\n\t\t\t);\n\t\t},\n\t\tuseCTADispatchContext() {\n\t\t\tconst ctaDispatchContext = useContext( CTAContextDispatch, );\n\t\t\tif ( ctaDispatchContext == null ) {\n\t\t\t\tconsole.error( 'useCTADispatchContext was called outside it\\'s Provider', );\n\t\t\t\treturn ctaDispatchContext satisfies null;\n\t\t\t}\n\n\t\t\treturn ctaDispatchContext satisfies ReturnType[1];\n\t\t},\n\t\tuseCTAHistoryContext() {\n\t\t\treturn useContext( CTAContextHistory, );\n\t\t},\n\t};\n}\n"],"names":[],"version":3,"file":"createCTAContext.3de38785.js.map"}