{"mappings":";;;;;;;;;;;;;;;AAoJO,SAAS,0CAMf,KAA8C,EAC9C,aAA0E,IAAQ,CAAA,CAAC,CAAA,CAAS;IAE5F,MAAM,UAAU,CAAA,GAAA,oBAAM,EACrB;QACC,IAAK,MAAM,OAAO,IAAI,OAAO,MAAM,OAAO,KAAK,UAC9C,OAAO;YACN,GAAG,MAAM,OAAO;QACjB;QAGD,OAAO,MAAM,OAAO;IACrB,GACA,uDAAuD;IACvD,EAAE;IAEH,MAAM,kBAAkB,CAAA,GAAA,iCAAY,EAA2B,OAAO;IACtE,MAAM,CACL,gBACA,GAAG;IACJ,MAAM,oBAAoB,CAAA,GAAA,oBAAM,EAC/B;QACC,MAAM,aAAa,OAAO,MAAM,iBAAiB,KAAK;QACtD,IAAI,WAAW;QACf,OAAO,SAAU,eAAyC;YACzD,IAAK,CAAC,cAAc,oBAAoB,UACvC;YAED,WAAW;YACX,QAAQ,OAAO,GAAG,IAAI,CAAE,IAAM,OAAO,oBACpC,CAAA,GAAA,iCAAe,EAAG,kBAClB,gBAAgB,UAAU,EAC1B,gBAAgB,YAAY;QAE9B;IACD,GACA,uDAAuD;IACvD,EAAE;IAEH,MAAM,MAAM,CAAA,GAAA,iCAAW,EAAG;iBACzB;yBACA;oBACA;IACD;IAEA,CAAA,GAAA,sBAAQ,EACP;QACC,kBAAmB;IACpB,GACA;QACC;QACA;KACA;IAGF,OAAO;AACR","sources":["src/useCTA.ts"],"sourcesContent":["import { useEffect, useMemo, } from 'react';\n\nimport createCTAHistory from './internal/createCTAHistory';\nimport usePrivateCTA from './internal/usePrivateCTA';\nimport usePublicCTA from './internal/usePublicCTA';\n\nimport type { CTAReducerState, } from './internal/ctaReducer';\nimport type { ActionsRecordProp, } from './types/ActionsRecordProp';\nimport type { CTAState, } from './types/CTAState';\nimport type { UseCTAParameter, } from './types/UseCTAParameter';\nimport type { UseCTAParameterActionsOptionalDefaultRecord, } from './types/UseCTAParameterActionsOptionalDefaultRecord';\nimport type { UseCTAParameterActionsRecordProp, } from './types/UseCTAParameterActionsRecordProp';\nimport type { UseCTAParameterCreateFunc, UseCTAParameterFuncRecord, } from './types/UseCTAParameterFunc';\nimport type { UseCTAReturnType, } from './types/UseCTAReturnType';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { CTAHistory, } from './types/CTAHistory';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAParameterOnInit, } from './types/UseCTAParameterOnInit';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAParameterCompare, } from './types/UseCTAParameterCompare';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAReturnTypeDispatch, UseCTAReturnTypeDispatchCTA, } from './types/UseCTAReturnTypeDispatch';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAParameterAfterActionChange, } from './types/UseCTAParameterAfterActionChange';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAParameterTransform, } from './types/UseCTAParameterTransform';\n\n/**\n * A React hook for managing complex state with custom actions, history tracking, and type safety.\n * @see {@link https://rafde.github.io/react-hook-use-cta/#use-cta useCTA}\n *\n * @template {CTAState} Initial\n *\n * @template {UseCTAParameterActionsRecordProp<Initial> | undefined} Actions\n *\n * @param {UseCTAParameter} props - Parameter for the useCTA.\n *\n * @param {CTAState} props.initial - initial {@link CTAState} structure for {@link CTAHistory}.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-initial useCTA Parameter: initial}.\n *\n * @param {UseCTAParameterOnInit} [props.onInit] - Optional {@link UseCTAParameterOnInit}\n * - `function` that runs once on component mount to handle `initial` parameter state before your component starts using it.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-on-init useCTA Parameter: onInit}\n *\n * @param {UseCTAParameterCompare} [props.compare] - Optional {@link UseCTAParameterCompare}\n * - `function` for custom equality logic by comparing only specific properties.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-compare useCTA Parameter: compare}\n *\n * @param {UseCTAParameterAfterActionChange} [props.afterActionChange] - Optional {@link UseCTAParameterAfterActionChange}\n * - `function` than only runs after an action has changed the hook state history.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-after-action-change useCTA Parameter: afterActionChange}\n *\n * @param {UseCTAParameterTransform} [props.transform] - Optional {@link UseCTAParameterTransform}\n * - A `function` that returns a transformed {@link CTAState} object before a default action evaluates\n * the result of a custom action or overridden default action.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-transform useCTA Parameter: transform}\n *\n * @param {UseCTAParameterActionsRecordProp} [props.actions] - Optional {@link UseCTAParameterActionsRecordProp}\n * - `object` type to define custom and/or overridden actions for state management.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-actions useCTA Parameter: actions}\n *\n * @param {UseCTAParameterCreateFunc} [createFunc] - Optional {@link UseCTAParameterCreateFunc}\n * - A `function` callback that receives {@link UseCTAReturnTypeDispatch} and expects an object Record of `function`s to be returned.\n * - @see {@link https://rafde.github.io/react-hook-use-cta/##use-cta-parameter-create-func Params: createFunc}\n *\n * @param {UseCTAReturnTypeDispatch} createFunc.dispatch - The parameter passed to {@link UseCTAParameterCreateFunc}\n *\n * @returns {[CTAHistory, UseCTAReturnTypeDispatch]}  An `array` containing {@link CTAHistory} and {@link UseCTAReturnTypeDispatch} elements:\n *\n * 1. {@link CTAHistory} - An `object` representing the history of hook state changes.\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-0-history useCTA return value [0]: history}\n *\n * 2. {@link UseCTAReturnTypeDispatch} - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch useCTA return value [1]: dispatch}\n * An `function` containing the following properties:\n * - {@link CTAHistory history} - A read-only reference to {@link CTAHistory} object.\n *\n * - {@link UseCTAReturnTypeDispatchCTA cta} - Read-only reference `object` to access call-to-action dispatch `function`s.\n *\n * `cta.update` - Update specific properties of your `current` state while preserving other values.\n *\n * {@link UseCTAReturnTypeDispatchCTA.update} Signature:\n *\n * ```ts\n * cta.update( Partial<CTAState> );\n * cta.update( ( CTAHistory<CTAState> ) => Partial<CTAState> | undefined );\n * cta.update( key: keyof CTAState, value: CTAState[keyof CTAState] );\n * ```\n *\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch-cta-update cta.update docs}\n *\n * `cta.replace` - Replaces all `current` property values with new property values.\n *\n * {@link UseCTAReturnTypeDispatchCTA.replace} Signature:\n *\n * ```ts\n * cta.replace( CTAState );\n * cta.replace( ( CTAHistory<CTAState> ) => CTAState | undefined );\n * ```\n *\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch-cta-replace cta.replace docs}\n *\n * `cta.reset` - Resets the `current` state back to the `initial` state or to synchronize the `current` state and the `initial` state.\n *\n * {@link UseCTAReturnTypeDispatchCTA.reset} Signature:\n *\n * ```ts;\n * cta.reset()\n * cta.reset( CTAState );\n * cta.reset( ( CTAHistory<CTAState> ) => CTAState | undefined );\n * ```\n *\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch-cta-reset cta.reset docs}\n *\n * `cta.updateInitial` - Lets you update specific properties of `initial` state while preserving other values.\n *\n * {@link UseCTAReturnTypeDispatchCTA.updateInitial} Signature:\n *\n * ```ts\n * cta.updateInitial( Partial<CTAState> );\n * cta.updateInitial( ( CTAHistory<CTAState> ) => Partial<CTAState> | undefined );\n * cta.updateInitial( key: keyof CTAState, value: CTAState[keyof CTAState] );\n * ```\n *\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch-cta-updateInitial cta.updateInitial docs}\n *\n * `cta.replaceInitial` - Replaces all `initial` property values with new property values.\n *\n * {@link UseCTAReturnTypeDispatchCTA.replaceInitial} Signature:\n *\n * ```ts\n * cta.replaceInitial( CTAState );\n * cta.replaceInitial( ( CTAHistory<CTAState> ) => CTAState | undefined );\n * ```\n *\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch-cta-replaceInitial cta.replaceInitial docs}\n *\n * `cta.YourCustomAction` - `YourCustomAction` is a placeholder for the name of a custom action you defined in `useCTAParameter.actions`\n *\n * {@link UseCTAReturnTypeDispatchCTA}.YourCustomAction Signature:\n *\n * ```ts\n * cta.YourCustomAction( ...args );\n * ```\n *\n * See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-return-value-1-dispatch-cta-custom-action cta.YourCustomAction docs}\n */\nexport function useCTA<\n\tInitial extends CTAState,\n\tActions extends UseCTAParameterActionsRecordProp<Initial> | undefined,\n\tFR extends UseCTAParameterFuncRecord,\n\tActionsRecord = Actions extends undefined ? UseCTAParameterActionsOptionalDefaultRecord<Initial> : Actions extends UseCTAParameterActionsRecordProp<Initial> ? ActionsRecordProp<Initial, Actions> : never,\n>(\n\tprops: UseCTAParameter<Initial, ActionsRecord>,\n\tcreateFunc: UseCTAParameterCreateFunc<Initial, ActionsRecord, FR, void> = () => ( {} as FR ),\n): UseCTAReturnType<Initial, ActionsRecord, FR, void> {\n\tconst actions = useMemo(\n\t\t() => {\n\t\t\tif ( props.actions && typeof props.actions === 'object' ) {\n\t\t\t\treturn {\n\t\t\t\t\t...props.actions,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn props.actions;\n\t\t},\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\t[],\n\t);\n\tconst stateDispatcher = usePrivateCTA<Initial, ActionsRecord>( props, actions, );\n\tconst [\n\t\tctaReducerState,\n\t] = stateDispatcher;\n\tconst afterActionChange = useMemo(\n\t\t() => {\n\t\t\tconst isFunction = typeof props.afterActionChange === 'function';\n\t\t\tlet oldState = ctaReducerState;\n\t\t\treturn function( ctaReducerState: CTAReducerState<Initial>, ) {\n\t\t\t\tif ( !isFunction || ctaReducerState === oldState ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\toldState = ctaReducerState;\n\t\t\t\tPromise.resolve().then( () => props?.afterActionChange?.(\n\t\t\t\t\tcreateCTAHistory( ctaReducerState, ),\n\t\t\t\t\tctaReducerState.actionType,\n\t\t\t\t\tctaReducerState.customAction,\n\t\t\t\t), );\n\t\t\t};\n\t\t},\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\t[],\n\t);\n\tconst res = usePublicCTA( {\n\t\tactions,\n\t\tstateDispatcher,\n\t\tcreateFunc,\n\t}, );\n\n\tuseEffect(\n\t\t() => {\n\t\t\tafterActionChange( ctaReducerState, );\n\t\t},\n\t\t[\n\t\t\tctaReducerState,\n\t\t\tafterActionChange,\n\t\t],\n\t);\n\n\treturn res;\n}\n"],"names":[],"version":3,"file":"useCTA.e14fb902.js.map"}