{"mappings":"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","sources":["src/internal/ctaReducer.ts"],"sourcesContent":["import type { CTAState, } from '../types/CTAState';\nimport type { CTAHistory, } from '../types/CTAHistory';\nimport type { CustomCTAReturnType, } from '../types/CustomCTAReturnType';\nimport { DefaultActionsRecord, } from '../types/DefaultActionsRecord';\nimport type { UseCTAParameter, } from '../types/UseCTAParameter';\nimport type { DispatchCTA, } from '../types/UseCTAReturnTypeDispatch';\nimport {\n\tActionType,\n\tcreateUpdateInitialActionType,\n\tcreateResetActionType,\n\tcreateUpdateActionType,\n\tcreateReplaceActionType,\n\tcreateReplaceInitialActionType,\n} from './ActionTypes';\nimport type { CompareCallbackReturnType, } from './compareCallback';\n\nexport type CTAReducerState<Initial extends CTAState,> = CTAHistory<Initial> & {\n\tchangesMap: Map<string | number, unknown>\n};\n\nfunction _replace<Initial extends CTAState,>(\n\tctaReducerState: CTAReducerState<Initial>,\n\tpayload: Initial,\n\tcompare: CompareCallbackReturnType,\n): CTAReducerState<Initial> {\n\tconst {\n\t\tinitial,\n\t\tcurrent,\n\t} = ctaReducerState;\n\tconst changesMap = new Map();\n\tlet hasChange = false;\n\tfor ( const key in payload ) {\n\t\tconst value = payload[ key ];\n\n\t\tif ( !compare( current[ key ], value, key, ) ) {\n\t\t\thasChange = true;\n\t\t\tif ( compare( initial[ key ], value, key, ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tchangesMap.set( key, value, );\n\t\t}\n\t}\n\n\tif ( !hasChange ) {\n\t\treturn ctaReducerState;\n\t}\n\n\treturn {\n\t\t...ctaReducerState,\n\t\tchangesMap,\n\t\tchanges: changesMap.size ? Object.fromEntries( changesMap, ) as Readonly<Partial<Initial>> : null,\n\t\tcurrent: payload,\n\t\tprevious: ctaReducerState.current,\n\t};\n}\n\nfunction _replaceInitial<Initial extends CTAState,>(\n\tctaReducerState: CTAReducerState<Initial>,\n\tpayload: Initial,\n\tcompare: CompareCallbackReturnType,\n): CTAReducerState<Initial> {\n\tconst {\n\t\tinitial,\n\t\tcurrent,\n\t} = ctaReducerState;\n\tconst changesMap = new Map();\n\tlet hasChange = false;\n\tfor ( const key in payload ) {\n\t\tconst value = payload[ key ];\n\t\tconst currentValue = current[ key ];\n\n\t\tif ( !compare( initial[ key ], value, key, ) ) {\n\t\t\thasChange = true;\n\t\t\tif ( compare( currentValue, value, key, ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tchangesMap.set( key, currentValue, );\n\t\t}\n\t}\n\n\tif ( !hasChange ) {\n\t\treturn ctaReducerState;\n\t}\n\n\treturn {\n\t\t...ctaReducerState,\n\t\tchangesMap,\n\t\tchanges: changesMap.size ? Object.fromEntries( changesMap, ) as Readonly<Partial<Initial>> : null,\n\t\tpreviousInitial: initial,\n\t\tinitial: payload,\n\t};\n}\n\nfunction _updateInitialState<Initial extends CTAState,>(\n\tctaReducerState: CTAReducerState<Initial>,\n\tpayload: Partial<Initial>,\n\tcompare: CompareCallbackReturnType,\n): CTAReducerState<Initial> {\n\tconst {\n\t\tchangesMap,\n\t\tcurrent,\n\t\tinitial,\n\t} = ctaReducerState;\n\tlet hasUpdates = false;\n\tconst next: Record<string, unknown> = {};\n\n\tfor ( const key in payload ) {\n\t\tconst value = payload[ key ];\n\t\tif ( compare( initial[ key as keyof Initial ], value, key, ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tnext[ key ] = value;\n\t\thasUpdates = true;\n\n\t\tconst currentValue = current[ key as keyof Initial ];\n\t\tif ( compare( currentValue, value, key, ) ) {\n\t\t\tchangesMap.delete( key, );\n\t\t}\n\t\telse {\n\t\t\tchangesMap.set( key, currentValue, );\n\t\t}\n\t}\n\n\tif ( !hasUpdates ) {\n\t\treturn ctaReducerState;\n\t}\n\n\treturn {\n\t\t...ctaReducerState,\n\t\tchanges: changesMap.size ? Object.fromEntries( changesMap, ) as Readonly<Partial<Initial>> : null,\n\t\tinitial: {\n\t\t\t...initial,\n\t\t\t...next,\n\t\t},\n\t\tpreviousInitial: initial,\n\t};\n}\n\nfunction _updateState<Initial extends CTAState,>(\n\tctaReducerState: CTAReducerState<Initial>,\n\tpayload: Partial<Initial>,\n\tcompare: CompareCallbackReturnType,\n): CTAReducerState<Initial> {\n\tconst {\n\t\tchangesMap,\n\t\tcurrent,\n\t\tinitial,\n\t} = ctaReducerState;\n\tlet hasUpdates = false;\n\tconst next: Record<string, unknown> = {};\n\n\tfor ( const key in payload ) {\n\t\tconst value = payload[ key ];\n\t\tif ( compare( current[ key as keyof Initial ], value, key, ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tnext[ key ] = value;\n\t\thasUpdates = true;\n\n\t\tconst initialValue = initial[ key as keyof Initial ];\n\t\tif ( compare( initialValue, value, key, ) ) {\n\t\t\tchangesMap.delete( key, );\n\t\t}\n\t\telse {\n\t\t\tchangesMap.set( key, value, );\n\t\t}\n\t}\n\n\tif ( !hasUpdates ) {\n\t\treturn ctaReducerState;\n\t}\n\n\treturn {\n\t\t...ctaReducerState,\n\t\tchanges: changesMap.size ? Object.fromEntries( changesMap, ) as Readonly<Partial<Initial>> : null,\n\t\tcurrent: {\n\t\t\t...current,\n\t\t\t...next,\n\t\t},\n\t\tprevious: current,\n\t};\n}\n\nfunction _resetState<Initial extends CTAState, >(\n\tctaReducerState: CTAReducerState<Initial>,\n\tnext: Initial,\n\tcompare: CompareCallbackReturnType,\n) {\n\tconst {\n\t\tchangesMap,\n\t\tcurrent,\n\t\tinitial,\n\t} = ctaReducerState;\n\n\tlet isNextSameAsInitial = true;\n\tlet isNextSameAsCurrent = true;\n\tfor ( const key in next ) {\n\t\tconst value = next[ key as keyof Initial ];\n\t\tconst currentValue = current[ key as keyof Initial ];\n\t\tconst initialValue = initial[ key as keyof Initial ];\n\n\t\tif ( !compare( initialValue, value, key, ) ) {\n\t\t\tisNextSameAsInitial = false;\n\t\t}\n\n\t\tif ( !compare( currentValue, value, key, ) ) {\n\t\t\tisNextSameAsCurrent = false;\n\t\t}\n\n\t\tif ( !isNextSameAsInitial && !isNextSameAsCurrent ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif ( isNextSameAsInitial && isNextSameAsCurrent ) {\n\t\treturn ctaReducerState;\n\t}\n\n\tlet previousInitial: CTAReducerState<Initial>['previousInitial'] = initial;\n\tif ( ctaReducerState.previousInitial === null && isNextSameAsInitial ) {\n\t\tpreviousInitial = null;\n\t}\n\n\tchangesMap.clear();\n\treturn {\n\t\t...ctaReducerState,\n\t\tchanges: null,\n\t\tinitial: next as Initial,\n\t\tcurrent: next as Initial,\n\t\tprevious: current,\n\t\tpreviousInitial,\n\t};\n}\n\nconst predefinedActionsConst: Record<keyof DefaultActionsRecord<NonNullable<unknown>>, keyof DefaultActionsRecord<NonNullable<unknown>>> = {\n\tupdateInitial: 'updateInitial',\n\treset: 'reset',\n\tupdate: 'update',\n\treplace: 'replace',\n\treplaceInitial: 'replaceInitial',\n} as const;\n\ntype PredefinedActions = keyof typeof predefinedActionsConst;\n\nfunction typeResult<\n\tInitial extends CTAState,\n\tType extends PredefinedActions,\n\tNext = Type extends 'update' ? Partial<Initial> : Initial,\n>(\n\tparam: {\n\t\tctaReducerState: CTAReducerState<Initial>\n\t\ttype: Type\n\t\tnext: Next\n\t\tcompare: CompareCallbackReturnType\n\t},\n) {\n\tconst {\n\t\tnext,\n\t\tctaReducerState,\n\t} = param;\n\n\tif ( next == null || Array.isArray( next, ) || next instanceof ActionType ) {\n\t\treturn ctaReducerState;\n\t}\n\n\tconst {\n\t\ttype,\n\t\tcompare,\n\t} = param;\n\n\tswitch ( type ) {\n\t\tcase 'replace':\n\t\t\treturn _replace(\n\t\t\t\tctaReducerState,\n\t\t\t\tnext as Initial,\n\t\t\t\tcompare,\n\t\t\t);\n\t\tcase 'replaceInitial':\n\t\t\treturn _replaceInitial(\n\t\t\t\tctaReducerState,\n\t\t\t\tnext as Initial,\n\t\t\t\tcompare,\n\t\t\t);\n\t\tcase 'reset':\n\t\t\treturn _resetState(\n\t\t\t\tctaReducerState,\n\t\t\t\tnext as Initial,\n\t\t\t\tcompare,\n\t\t\t);\n\t\tcase 'updateInitial':\n\t\t\treturn _updateInitialState(\n\t\t\t\tctaReducerState,\n\t\t\t\tnext,\n\t\t\t\tcompare,\n\t\t\t);\n\t\tdefault:\n\t\t\treturn _updateState(\n\t\t\t\tctaReducerState,\n\t\t\t\tnext,\n\t\t\t\tcompare,\n\t\t\t);\n\t}\n}\n\nfunction getActionType<\n\tInitial extends CTAState,\n>( ctaReturnType: CustomCTAReturnType<Initial>, ) {\n\tif ( ctaReturnType instanceof ActionType ) {\n\t\tconst {\n\t\t\ttype,\n\t\t\tnextState,\n\t\t\tactionTypeOptions,\n\t\t} = ctaReturnType;\n\t\tconst useDefault = Boolean( actionTypeOptions?.useDefault, );\n\n\t\tif ( Array.isArray( nextState, ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst actionType = {\n\t\t\tnext: nextState,\n\t\t\ttype,\n\t\t\tuseDefault,\n\t\t};\n\n\t\tif ( type === 'reset' ) {\n\t\t\tif ( typeof nextState === 'undefined' ) {\n\t\t\t\treturn actionType;\n\t\t\t}\n\n\t\t\tif ( nextState == null ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn actionType;\n\t\t}\n\n\t\tif ( !nextState || typeof nextState !== 'object' ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn actionType;\n\t}\n\n\tif ( ctaReturnType && typeof ctaReturnType === 'object' ) {\n\t\treturn {\n\t\t\tnext: ctaReturnType as Partial<Initial>,\n\t\t\ttype: 'update' as Extract<PredefinedActions, 'update'>,\n\t\t\tuseDefault: false,\n\t\t};\n\t}\n}\n\nconst _args: unknown[] = [];\n\nexport default function ctaReducer<\n\tInitial extends CTAState,\n\tActions,\n>( params: {\n\tctaReducerState: CTAReducerState<Initial>\n\tactions?: UseCTAParameter<Initial, Actions>['actions']\n\tnextCTAProps: Parameters<DispatchCTA<Initial, Actions>>[0]\n\tcompare: CompareCallbackReturnType\n}, ): CTAReducerState<Initial> {\n\tconst {\n\t\targs = _args,\n\t\ttype: ctaType,\n\t\tpayload,\n\t} = params.nextCTAProps;\n\tconst {\n\t\tctaReducerState,\n\t\tactions,\n\t\tcompare,\n\t} = params;\n\tconst {\n\t\tcurrent,\n\t\tinitial,\n\t} = ctaReducerState;\n\tconst ctaState: CTAHistory<Initial> = {\n\t\tchanges: ctaReducerState.changes,\n\t\tcurrent,\n\t\tinitial,\n\t\tprevious: ctaReducerState.previous,\n\t\tpreviousInitial: ctaReducerState.previousInitial,\n\t};\n\n\tconst isActionsObject = actions && typeof actions == 'object' && !Array.isArray( actions, );\n\n\tif ( ctaType in predefinedActionsConst && ( !isActionsObject || !( ctaType in actions ) ) ) {\n\t\tif ( payload instanceof Function ) {\n\t\t\treturn typeResult( {\n\t\t\t\tctaReducerState,\n\t\t\t\tnext: payload( ctaState, ),\n\t\t\t\ttype: ctaType as PredefinedActions,\n\t\t\t\tcompare,\n\t\t\t}, );\n\t\t}\n\n\t\tif ( ctaType === 'reset' && typeof payload === 'undefined' ) {\n\t\t\treturn typeResult( {\n\t\t\t\tctaReducerState,\n\t\t\t\tnext: initial,\n\t\t\t\ttype: 'reset',\n\t\t\t\tcompare,\n\t\t\t}, );\n\t\t}\n\n\t\treturn typeResult( {\n\t\t\tctaReducerState,\n\t\t\tnext: payload,\n\t\t\ttype: ctaType as PredefinedActions,\n\t\t\tcompare,\n\t\t}, );\n\t}\n\n\tconst cta = isActionsObject && actions![ ctaType as keyof typeof actions ];\n\n\tif ( typeof cta !== 'function' ) {\n\t\treturn ctaReducerState;\n\t}\n\n\tlet nextPayload: typeof payload | null = payload;\n\tif ( payload instanceof Function ) {\n\t\tconst nextCTAPayloadResult = payload(\n\t\t\tctaState,\n\t\t);\n\n\t\tif ( typeof nextCTAPayloadResult === 'undefined' ) {\n\t\t\treturn ctaReducerState;\n\t\t}\n\n\t\tnextPayload = nextCTAPayloadResult;\n\t}\n\n\tif ( ctaType in predefinedActionsConst ) {\n\t\tconst next = cta(\n\t\t\tctaState,\n\t\t\tnextPayload,\n\t\t\t...args,\n\t\t);\n\n\t\treturn typeResult( {\n\t\t\tctaReducerState,\n\t\t\tnext,\n\t\t\ttype: ctaType as PredefinedActions,\n\t\t\tcompare,\n\t\t}, );\n\t}\n\n\tconst nextState = cta(\n\t\t{\n\t\t\t...ctaState,\n\t\t\treplaceAction: createReplaceActionType( actions, ),\n\t\t\treplaceInitialAction: createReplaceInitialActionType( actions, ),\n\t\t\tresetAction: createResetActionType( actions, ),\n\t\t\tupdateAction: createUpdateActionType( actions, ),\n\t\t\tupdateInitialAction: createUpdateInitialActionType( actions, ),\n\t\t},\n\t\tnextPayload,\n\t\t...args,\n\t);\n\n\tconst actionType = getActionType<Initial>( nextState, );\n\n\tif ( !actionType ) {\n\t\treturn ctaReducerState;\n\t}\n\n\tconst {\n\t\ttype,\n\t\tnext,\n\t} = actionType;\n\n\tconst customPredefinedCTA = isActionsObject && actions![ type as keyof typeof actions ];\n\n\tif ( actionType.useDefault || typeof customPredefinedCTA !== 'function' ) {\n\t\treturn typeResult( {\n\t\t\tctaReducerState,\n\t\t\tnext,\n\t\t\ttype,\n\t\t\tcompare,\n\t\t}, );\n\t}\n\n\treturn typeResult( {\n\t\tctaReducerState,\n\t\tnext: customPredefinedCTA( ctaState, next, ),\n\t\ttype,\n\t\tcompare,\n\t}, );\n}\n"],"names":[],"version":3,"file":"ctaReducer.820a236d.js.map"}