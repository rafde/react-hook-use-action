{"mappings":";;;;;;;;;;;AAUO,SAAS,0CAKf,eAQC;IAED,MAAM,WACL,OAAO,EACP,GAAG;IACJ,MAAM,UAAU,OAAO,gBAAgB,OAAO,KAAK,cAChD,YACA;QACD,GAAG,gBAAgB,OAAO;IAC3B;IACD,IAAI,QAA6B;QAChC,SAAS;QACT,SAAS;iBACT;QACA,UAAU;QACV,iBAAiB;IAClB;IACA,IAAI,kBAA4C;QAC/C,GAAG,KAAK;QACR,YAAY,IAAI;IACjB;IACA,MAAM,UAAU,CAAA,GAAA,yCAAc,EAAG,gBAAgB,OAAO;IAExD,SAAS,aAAc,YAAsF;QAC5G,MAAM,qBAAqB,CAAA,GAAA,iCAAS,EAA2B;qBAC9D;qBACA;6BACA;0BACA;QACD;QAEA,IAAK,uBAAuB,iBAAkB;YAC7C,kBAAkB;YAClB,QAAQ;gBACP,SAAS,gBAAgB,OAAO;gBAChC,SAAS,gBAAgB,OAAO;gBAChC,SAAS,gBAAgB,OAAO;gBAChC,UAAU,gBAAgB,QAAQ;gBAClC,iBAAiB,gBAAgB,eAAe;YACjD;QACD;QAEA,aAAa,KAAK,GAAG;QACrB,OAAO;IACR;IAEA,aAAa,KAAK,GAAG;IACrB,aAAa,GAAG,GAAG;QAClB,SAAS,CAAA,UAAW,aAAc;yBACjC;gBACA,MAAM;YACP;QACA,gBAAgB,CAAA,UAAW,aAAc;yBACxC;gBACA,MAAM;YACP;QACA,OAAO,CAAA,UAAW,aAAc;yBAC/B;gBACA,MAAM;YACP;QACA,QAAQ,OAAO,EAAE,KAAK;YACrB,OAAS,OAAO;gBACf,KAAK;gBACL,KAAK;oBACJ,OAAO,aAAc;wBACpB,SAAS;4BACR,CAAE,QAAS,EAAE;wBACd;wBACA,MAAM;oBACP;gBAED;oBACC,OAAO,aAAc;iCACpB;wBACA,MAAM;oBACP;YAEF;QACD;QACA,eAAe,CAAA,UAAW,aAAc;yBACvC;gBACA,MAAM;YACP;IACD;IAEA,IAAK,WAAW,QAAQ,OAAO,YAAY,UAC1C,OAAO;QACN;QACA;KACA;IAGF,MAAM,mBAAmB,aAAa,GAAG;IACzC,IAAI,kBAAkB;IACtB,MAAM,gBAAgB,CAAC;IAKvB,IAAM,MAAM,QAAQ,QAAU;QAC7B,IAAK,QAAQ,oBAAoB,OAAO,OAAO,CAAE,KAAM,KAAK,YAC3D;QAGD,aAAa,CAAE,KAA+C,GAAG,CAAE,SAAmB,GAAG,OAAU,aAAc;yBAChH;sBACA;sBACA;YACD;QAEA,kBAAkB;IACnB;IAEA,IAAK,iBACJ,OAAO,MAAM,CAAE,aAAa,GAAG,EAAE;IAGlC,OAAO;QACN;QACA;KACA;AACF","sources":["src/internal/ctaCallback.ts"],"sourcesContent":["import type { CTAState, } from '../types/CTAState';\nimport { CTAHistory, } from '../types/CTAHistory';\nimport type { DefaultActionsRecord, } from '../types/DefaultActionsRecord';\nimport type { ActionsRecordProp, UseCTAParameterActionsRecordProp, } from '../types/UseCTAParameterActionsRecordProp';\nimport { UseCTAParameterCompare, } from '../types/UseCTAParameterCompare';\nimport { UseCTAReturnType, } from '../types/UseCTAReturnType';\nimport { DispatchCTADefaultRecord, UpdateCTAProps, } from '../types/UseCTAReturnTypeDispatch';\nimport { compareCallback, } from './compareCallback';\nimport ctaReducer, { CTAReducerState, } from './ctaReducer';\n\nexport function ctaCallback<\n\tInitial extends CTAState,\n\tActions extends UseCTAParameterActionsRecordProp<Initial> | undefined,\n\tActionsRecord = Actions extends Partial<DefaultActionsRecord<Initial>> ? ActionsRecordProp<Initial, Actions> : Actions,\n>(\n\tuseCTAParameter: ActionsRecord extends undefined ? {\n\t\tactions?: undefined\n\t\tinitial: Initial\n\t\tcompare?: UseCTAParameterCompare<Initial>\n\t} : {\n\t\tactions: ActionsRecord\n\t\tinitial: Initial\n\t\tcompare?: UseCTAParameterCompare<Initial>\n\t},\n): UseCTAReturnType<Initial, ActionsRecord, CTAHistory<Initial>> {\n\tconst {\n\t\tinitial,\n\t} = useCTAParameter;\n\tconst actions = typeof useCTAParameter.actions === 'undefined'\n\t\t? undefined\n\t\t: {\n\t\t\t...useCTAParameter.actions,\n\t\t};\n\tlet state: CTAHistory<Initial> = {\n\t\tchanges: null,\n\t\tcurrent: initial,\n\t\tinitial,\n\t\tprevious: null,\n\t\tpreviousInitial: null,\n\t};\n\tlet ctaReducerState: CTAReducerState<Initial> = {\n\t\t...state,\n\t\tchangesMap: new Map(),\n\t};\n\tconst compare = compareCallback( useCTAParameter.compare, );\n\n\tfunction _ctaCallback( nextCTAProps: Parameters<typeof ctaReducer<Initial, ActionsRecord>>[0]['nextCTAProps'], ) {\n\t\tconst newCtaReducerState = ctaReducer<Initial, ActionsRecord>( {\n\t\t\tactions,\n\t\t\tcompare,\n\t\t\tctaReducerState,\n\t\t\tnextCTAProps,\n\t\t}, );\n\n\t\tif ( newCtaReducerState !== ctaReducerState ) {\n\t\t\tctaReducerState = newCtaReducerState;\n\t\t\tstate = {\n\t\t\t\tchanges: ctaReducerState.changes,\n\t\t\t\tcurrent: ctaReducerState.current,\n\t\t\t\tinitial: ctaReducerState.initial,\n\t\t\t\tprevious: ctaReducerState.previous,\n\t\t\t\tpreviousInitial: ctaReducerState.previousInitial,\n\t\t\t};\n\t\t}\n\n\t\t_ctaCallback.state = state;\n\t\treturn state;\n\t}\n\n\t_ctaCallback.state = state;\n\t_ctaCallback.cta = {\n\t\treplace: payload => _ctaCallback( {\n\t\t\tpayload,\n\t\t\ttype: 'replace',\n\t\t}, ),\n\t\treplaceInitial: payload => _ctaCallback( {\n\t\t\tpayload,\n\t\t\ttype: 'replaceInitial',\n\t\t}, ),\n\t\treset: payload => _ctaCallback( {\n\t\t\tpayload,\n\t\t\ttype: 'reset',\n\t\t}, ),\n\t\tupdate( payload, value, ) {\n\t\t\tswitch ( typeof payload ) {\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'string': {\n\t\t\t\t\treturn _ctaCallback( {\n\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t[ payload ]: value as Initial[keyof Initial],\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttype: 'update',\n\t\t\t\t\t} as unknown as UpdateCTAProps<Initial>, );\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\treturn _ctaCallback( {\n\t\t\t\t\t\tpayload,\n\t\t\t\t\t\ttype: 'update',\n\t\t\t\t\t} as unknown as UpdateCTAProps<Initial>, );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tupdateInitial: payload => _ctaCallback( {\n\t\t\tpayload,\n\t\t\ttype: 'updateInitial',\n\t\t}, ),\n\t} as DispatchCTADefaultRecord<Initial, CTAHistory<Initial>>;\n\n\tif ( actions == null || typeof actions !== 'object' ) {\n\t\treturn [\n\t\t\tstate,\n\t\t\t_ctaCallback as unknown as UseCTAReturnType<Initial, ActionsRecord, CTAHistory<Initial>>[1],\n\t\t];\n\t}\n\n\tconst defaultCTARecord = _ctaCallback.cta;\n\tlet hasCustomAction = false;\n\tconst customActions = {} as Record<\n\t\tExclude<keyof Exclude<Actions, undefined>, keyof DefaultActionsRecord<Initial>>,\n\t\t( payload?: unknown, ...args: unknown[] ) => void\n\t>;\n\n\tfor ( const type in actions ) {\n\t\tif ( type in defaultCTARecord || typeof actions[ type ] !== 'function' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tcustomActions[ type as unknown as keyof typeof customActions ] = ( payload?: unknown, ...args ) => _ctaCallback( {\n\t\t\tpayload,\n\t\t\ttype,\n\t\t\targs,\n\t\t} as Parameters<typeof ctaReducer<Initial, ActionsRecord>>[0]['nextCTAProps'], );\n\n\t\thasCustomAction = true;\n\t}\n\n\tif ( hasCustomAction ) {\n\t\tObject.assign( _ctaCallback.cta, customActions, );\n\t}\n\n\treturn [\n\t\tstate,\n\t\t_ctaCallback as unknown as UseCTAReturnType<Initial, ActionsRecord, CTAHistory<Initial>>[1],\n\t];\n}\n"],"names":[],"version":3,"file":"ctaCallback.75695350.js.map"}