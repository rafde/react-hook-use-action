{"mappings":";;;;;;;;;AAeA,SAAS,mDAKR,QAAkB,EAClB,gBAAmD,EACnD,SAAwD;IAExD,IAAI,kBAAkB;IACtB,MAAM,gBAAgB,CAAC;IAIvB,MAAM,aAAa;IACnB,IAAM,MAAM,QAAQ,UAAY;QAC/B,IAAK,QAAQ,oBAAoB,OAAO,SAAS,CAAE,KAAM,KAAK,YAC7D;QAGD,aAAa,CAAE,KAA+C,GAAG,CAAE,SAAmB,GAAG;YACxF,WAAY;sBACX;yBACA;gBACA,SAAS,IAAI,CAAE,EAAG;sBAClB;YACD;QACD;QAEA,kBAAkB;IACnB;IAEA,IAAK,CAAC,iBACL,OAAO;IAGR,OAAO,OAAO,MAAM,CACnB,kBACA;AAEF;AAEA,SAAS,4CAIR,UAAqD,EACrD,OAAsD;IAEtD,MAAM,mBAAkD,CAAE;QACzD,WAAY;IACb;IAEA,MAAM,MAAyC;QAC9C,SAAS,OAAO;YACf,iBAAkB;yBACjB;gBACA,MAAM;YACP;QACD;QACA,gBAAgB,OAAO;YACtB,iBAAkB;yBACjB;gBACA,MAAM;YACP;QACD;QACA,OAAO,OAAO;YACb,iBAAkB;yBACjB;gBACA,MAAM;YACP;QACD;QACA,QAAQ,OAAO,EAAE,GAAG,IAAI;YACvB,OAAS,OAAO;gBACf,KAAK;gBACL,KAAK;oBAAU;wBACd,MAAM,CACL,SACA,GAAG;wBACJ,iBAAkB;4BACjB,SAAS;gCACR,CAAE,QAAS,EAAE;4BACd;4BACA,MAAM;wBACP;wBACA;oBACD;gBACA;oBACC,iBAAkB;iCACjB;wBACA,MAAM;oBACP;oBACA;YAEF;QACD;QACA,eAAe,OAAO;YACrB,iBAAkB;yBACjB;gBACA,MAAM;YACP;QACD;IACD;IAEA,IAAK,WAAW,QAAQ,OAAO,YAAY,UAC1C,OAAO,OAAO,MAAM,CACnB,kBACA;aACC;IACD;IAIF,OAAO,OAAO,MAAM,CACnB,kBACA;QACC,KAAK,mDACJ,kBACA,KACA;IAEF;AAEF;AAEe,kDAGZ,MAGF;IACA,MAAM,WACL,OAAO,EACP,GAAG;IACJ,MAAM,CACL,UACA,YACA,GAAG,OAAO,eAAe;IAE1B,MAAM,sBAAsB,CAAA,GAAA,oBAAM,EACjC,IAAM,4CAAyC,aAAa,UAC5D;QACC;QACA;KACA;IAGF,OAAO,CAAA,GAAA,oBAAM,EACZ;QACC,MAAM,QAA2B;YAChC,SAAS,SAAS,OAAO;YACzB,SAAS,SAAS,OAAO;YACzB,SAAS,SAAS,OAAO;YACzB,UAAU,SAAS,QAAQ;YAC3B,iBAAiB,SAAS,eAAe;QAC1C;QACA,MAAM,WAAW,OAAO,MAAM,CAC7B,qBACA;mBACC;QACD;QAED,OAAO;YACN;YACA;SACA;IACF,GACA;QACC;QACA;KACA;AAEH","sources":["src/internal/usePublicCTA.ts"],"sourcesContent":["import { useMemo, } from 'react';\n\nimport type { CTAInitial, } from '../types/CTAInitial';\nimport type { CTAState, } from '../types/CTAState';\nimport { DefaultActionsRecord, } from '../types/DefaultActionsRecord';\nimport type { UseCTAParameter, } from '../types/UseCTAParameter';\nimport type { UseCTAReturnType, } from '../types/UseCTAReturnType';\nimport {\n\tDispatchCTADefaultRecord,\n\tDispatchCTA,\n\tUpdateInitialCTAProps,\n\tResetCTAProps, UpdateCTAProps, ReplaceCTAProps, ReplaceInitialCTAProps,\n} from '../types/UseCTAReturnTypeDispatch';\nimport type { UsePrivateCTADispatcher, UsePrivateCTAReturnType, } from './usePrivateCTA';\n\nfunction mergeCustomCTAWithDefaultCTA<\n\tInitial extends CTAInitial,\n\tActions,\n\tDispatch,\n>(\n\tdispatch: Dispatch,\n\tdefaultCTARecord: DispatchCTADefaultRecord<Initial>,\n\tctaRecord?: UseCTAParameter<Initial, Actions>['actions'],\n) {\n\tlet hasCustomAction = false;\n\tconst customActions = {} as Record<\n\t\tExclude<keyof Exclude<Actions, undefined>, keyof DefaultActionsRecord<Initial>>,\n\t\t( payload?: unknown, ...args: unknown[] ) => void\n\t>;\n\tconst dispatcher = dispatch as DispatchCTA<Initial, Actions>;\n\tfor ( const type in ctaRecord ) {\n\t\tif ( type in defaultCTARecord || typeof ctaRecord[ type ] !== 'function' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tcustomActions[ type as unknown as keyof typeof customActions ] = ( payload?: unknown, ...args ) => {\n\t\t\tdispatcher( {\n\t\t\t\ttype,\n\t\t\t\tpayload,\n\t\t\t\toptions: args[ 0 ],\n\t\t\t\targs,\n\t\t\t} as unknown as Parameters<DispatchCTA<Initial, Actions>>[0], );\n\t\t};\n\n\t\thasCustomAction = true;\n\t}\n\n\tif ( !hasCustomAction ) {\n\t\treturn defaultCTARecord;\n\t}\n\n\treturn Object.assign(\n\t\tdefaultCTARecord,\n\t\tcustomActions,\n\t);\n}\n\nfunction wrapPrivateDispatcher<\n\tInitial extends CTAInitial,\n\tActions,\n>(\n\tdispatcher: UsePrivateCTADispatcher<Initial, Actions>,\n\tactions?: UseCTAParameter<Initial, Actions>['actions'],\n) {\n\tconst publicDispatcher: DispatchCTA<Initial, Actions> = ( cta, ) => {\n\t\tdispatcher( cta, );\n\t};\n\n\tconst cta: DispatchCTADefaultRecord<Initial> = {\n\t\treplace( payload, ) {\n\t\t\tpublicDispatcher( {\n\t\t\t\tpayload,\n\t\t\t\ttype: 'replace',\n\t\t\t} as unknown as ReplaceCTAProps<Initial>, );\n\t\t},\n\t\treplaceInitial( payload, ) {\n\t\t\tpublicDispatcher( {\n\t\t\t\tpayload,\n\t\t\t\ttype: 'replaceInitial',\n\t\t\t} as unknown as ReplaceInitialCTAProps<Initial>, );\n\t\t},\n\t\treset( payload, ) {\n\t\t\tpublicDispatcher( {\n\t\t\t\tpayload,\n\t\t\t\ttype: 'reset',\n\t\t\t} as unknown as ResetCTAProps<Initial>, );\n\t\t},\n\t\tupdate( payload, ...args ) {\n\t\t\tswitch ( typeof payload ) {\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'string': {\n\t\t\t\t\tconst [\n\t\t\t\t\t\t_payload,\n\t\t\t\t\t] = args;\n\t\t\t\t\tpublicDispatcher( {\n\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t[ payload ]: _payload,\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttype: 'update',\n\t\t\t\t\t} as unknown as UpdateCTAProps<Initial>, );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\tpublicDispatcher( {\n\t\t\t\t\t\tpayload,\n\t\t\t\t\t\ttype: 'update',\n\t\t\t\t\t} as unknown as UpdateCTAProps<Initial>, );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tupdateInitial( payload, ) {\n\t\t\tpublicDispatcher( {\n\t\t\t\tpayload,\n\t\t\t\ttype: 'updateInitial',\n\t\t\t} as unknown as UpdateInitialCTAProps<Initial>, );\n\t\t},\n\t};\n\n\tif ( actions == null || typeof actions !== 'object' ) {\n\t\treturn Object.assign(\n\t\t\tpublicDispatcher,\n\t\t\t{\n\t\t\t\tcta,\n\t\t\t},\n\t\t);\n\t}\n\n\treturn Object.assign(\n\t\tpublicDispatcher,\n\t\t{\n\t\t\tcta: mergeCustomCTAWithDefaultCTA(\n\t\t\t\tpublicDispatcher,\n\t\t\t\tcta,\n\t\t\t\tactions,\n\t\t\t),\n\t\t},\n\t);\n}\n\nexport default function usePublicCTA<\n\tInitial extends CTAInitial,\n\tActions,\n>( params: {\n\tactions?: UseCTAParameter<Initial, Actions>['actions']\n\tstateDispatcher: UsePrivateCTAReturnType<Initial, Actions>\n}, ): UseCTAReturnType<Initial, Actions> {\n\tconst {\n\t\tactions,\n\t} = params;\n\tconst [\n\t\tctaState,\n\t\tctaDispatch,\n\t] = params.stateDispatcher;\n\n\tconst augmentedDispatcher = useMemo(\n\t\t() => wrapPrivateDispatcher<Initial, Actions>( ctaDispatch, actions, ),\n\t\t[\n\t\t\tctaDispatch,\n\t\t\tactions,\n\t\t],\n\t);\n\n\treturn useMemo(\n\t\t() => {\n\t\t\tconst state: CTAState<Initial> = {\n\t\t\t\tchanges: ctaState.changes,\n\t\t\t\tcurrent: ctaState.current,\n\t\t\t\tinitial: ctaState.initial,\n\t\t\t\tprevious: ctaState.previous,\n\t\t\t\tpreviousInitial: ctaState.previousInitial,\n\t\t\t};\n\t\t\tconst dispatch = Object.assign(\n\t\t\t\taugmentedDispatcher,\n\t\t\t\t{\n\t\t\t\t\tstate,\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn [\n\t\t\t\tstate,\n\t\t\t\tdispatch as unknown as UseCTAReturnType<Initial, Actions>[1],\n\t\t\t];\n\t\t},\n\t\t[\n\t\t\tctaState,\n\t\t\taugmentedDispatcher,\n\t\t],\n\t);\n}\n"],"names":[],"version":3,"file":"usePublicCTA.02e47033.js.map"}