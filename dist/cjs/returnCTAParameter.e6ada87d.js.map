{"mappings":";;;;;;AA4CO,SAAS,0CAIb,KAA8C;IAChD,OAAO;AACR","sources":["src/returnCTAParameter.ts"],"sourcesContent":["import type { ActionsRecordProp, } from './types/ActionsRecordProp';\nimport type { CTAState, } from './types/CTAState';\nimport type { UseCTAParameter, } from './types/UseCTAParameter';\nimport type { UseCTAParameterActionsOptionalDefaultRecord, } from './types/UseCTAParameterActionsOptionalDefaultRecord';\nimport type { UseCTAParameterActionsRecordProp, } from './types/UseCTAParameterActionsRecordProp';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAParameterCompare, } from './types/UseCTAParameterCompare';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAParameterOnInit, } from './types/UseCTAParameterOnInit';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- Used in the JSDoc comment.\nimport type { UseCTAParameterAfterActionChange, } from './types/UseCTAParameterAfterActionChange';\n\n/**\n * A `function` that returns a type safe {@link UseCTAParameter} `object`.\n *\n * Useful if you want to create the parameter outside  {@link useCTA}, {@link createCTA}, or {@link createCTAContext} for type safety.\n *\n * @template {CTAState} Initial - The initial state type.\n * @template {UseCTAParameterActionsRecordProp} Actions - The actions type.\n *\n * @param {UseCTAParameter} props - {@link UseCTAParameter} parameter.\n *\n * @param {CTAState} props.initial - initial {@link CTAState} structure for {@link CTAHistory}.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-initial useCTA Parameter: initial}.\n *\n * @param {UseCTAParameterOnInit} [props.onInit] - Optional {@link UseCTAParameterOnInit}\n * - `function` that runs once on component mount to handle `initial` parameter state before your component starts using it.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-on-init useCTA Parameter: onInit}\n *\n * @param {UseCTAParameterCompare} [props.compare] - Optional {@link UseCTAParameterCompare}\n * - `function` for custom equality logic by comparing only specific properties.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-compare useCTA Parameter: compare}\n *\n * @param {UseCTAParameterAfterActionChange} [props.afterActionChange] - Optional {@link UseCTAParameterAfterActionChange}\n * - `function` than only runs after an action has changed the hook state history.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-after-action-change useCTA Parameter: afterActionChange}\n *\n * @param {UseCTAParameterActionsRecordProp} [props.actions] - Optional {@link UseCTAParameterActionsRecordProp}\n * - `object` type to define custom and/or overridden actions for state management.\n * - See {@link https://rafde.github.io/react-hook-use-cta/#use-cta-parameter-actions useCTA Parameter: actions}\n *\n * @returns {UseCTAParameter} Type safe {@link UseCTAParameter} `object`.\n */\nexport function returnCTAParameter<\n\tInitial extends CTAState,\n\tActions extends UseCTAParameterActionsRecordProp<Initial> | undefined,\n\tActionsRecord = Actions extends undefined ? UseCTAParameterActionsOptionalDefaultRecord<Initial> : Actions extends UseCTAParameterActionsRecordProp<Initial> ? ActionsRecordProp<Initial, Actions> : never,\n>( props: UseCTAParameter<Initial, ActionsRecord>, ): UseCTAParameter<Initial, ActionsRecord> {\n\treturn props;\n}\n"],"names":[],"version":3,"file":"returnCTAParameter.e6ada87d.js.map"}