{"mappings":";;;;;;AAUO,SAAS,0CAIb,QAAoD,EAAE,OAAiB;IACzE,MAAM,kBAAkB,CAAE,QAA4C,SAAU;IAEhF,MAAM,MAAsD;QAC3D,SAAS,CAAA,UAAW,SAAU;yBAC7B;gBACA,MAAM;YACP;QACA,gBAAgB,CAAA,UAAW,SAAU;yBACpC;gBACA,MAAM;YACP;QACA,OAAO,CAAA,UAAW,SAAU;yBAC3B;gBACA,MAAM;YACP;QACA,QAAQ,OAAO,EAAE,KAAK;YACrB,OAAS,OAAO;gBACf,KAAK;gBACL,KAAK;oBACJ,OAAO,SAAU;wBAChB,SAAS;4BACR,CAAE,QAAS,EAAE;wBACd;wBACA,MAAM;oBACP;gBAED;oBACC,OAAO,SAAU;iCAChB;wBACA,MAAM;oBACP;YAEF;QACD;QACA,eAAe,CAAA,UAAW,SAAU;yBACnC;gBACA,MAAM;YACP;IACD;IACA,MAAM,QAAQ;aACb;IACD;IACA,IAAK,WAAW,QAAQ,OAAO,YAAY,UAC1C,OAAO,OAAO,MAAM,CAAE,iBAAiB;IAGxC,IAAI,kBAAkB;IACtB,MAAM,gBAAgB,CAAC;IAKvB,IAAM,MAAM,QAAQ,QAAU;QAC7B,IAAK,QAAQ,OAAO,OAAO,OAAO,CAAE,KAAM,KAAK,YAC9C;QAGD,aAAa,CAAE,KAA+C,GAAG,CAAE,SAAmB,GAAG,OAAU,SAAU;yBAC5G;sBACA;sBACA;YACD;QAEA,kBAAkB;IACnB;IAEA,IAAK,iBACJ,OAAO,MAAM,CAAE,MAAM,GAAG,EAAE;IAG3B,OAAO,OAAO,MAAM,CAAE,iBAAiB;AACxC","sources":["src/internal/createDispatchInterface.ts"],"sourcesContent":["import type { CTAState, } from '../types/CTAState';\nimport type { DefaultActionsRecord, } from '../types/DefaultActionsRecord';\nimport {\n\tDispatchCTA,\n\tDispatchCTADefaultRecord,\n\tUpdateCTAProps,\n\ttype UseCTAReturnTypeDispatch,\n} from '../types/UseCTAReturnTypeDispatch';\nimport ctaReducer from './ctaReducer';\n\nexport function createDispatchInterface<\n\tInitial extends CTAState,\n\tActions,\n\tReturnValue = void,\n>( dispatch: DispatchCTA<Initial, Actions, ReturnValue>, actions?: Actions, ) {\n\tconst dispatchWrapper = ( value: Parameters<typeof dispatch>[0], ) => dispatch( value, );\n\n\tconst cta: DispatchCTADefaultRecord<Initial, ReturnValue> = {\n\t\treplace: payload => dispatch( {\n\t\t\tpayload,\n\t\t\ttype: 'replace',\n\t\t}, ),\n\t\treplaceInitial: payload => dispatch( {\n\t\t\tpayload,\n\t\t\ttype: 'replaceInitial',\n\t\t}, ),\n\t\treset: payload => dispatch( {\n\t\t\tpayload,\n\t\t\ttype: 'reset',\n\t\t}, ),\n\t\tupdate( payload, value, ) {\n\t\t\tswitch ( typeof payload ) {\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'string': {\n\t\t\t\t\treturn dispatch( {\n\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t[ payload ]: value as Initial[keyof Initial],\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttype: 'update',\n\t\t\t\t\t} as unknown as UpdateCTAProps<Initial>, );\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\treturn dispatch( {\n\t\t\t\t\t\tpayload,\n\t\t\t\t\t\ttype: 'update',\n\t\t\t\t\t} as unknown as UpdateCTAProps<Initial>, );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tupdateInitial: payload => dispatch( {\n\t\t\tpayload,\n\t\t\ttype: 'updateInitial',\n\t\t}, ),\n\t};\n\tconst props = {\n\t\tcta,\n\t};\n\tif ( actions == null || typeof actions !== 'object' ) {\n\t\treturn Object.assign( dispatchWrapper, props, ) as unknown as UseCTAReturnTypeDispatch<Initial, Actions, ReturnValue>;\n\t}\n\n\tlet hasCustomAction = false;\n\tconst customActions = {} as Record<\n\t\tExclude<keyof Exclude<Actions, undefined>, keyof DefaultActionsRecord<Initial>>,\n\t\t( payload?: unknown, ...args: unknown[] ) => void\n\t>;\n\n\tfor ( const type in actions ) {\n\t\tif ( type in cta || typeof actions[ type ] !== 'function' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tcustomActions[ type as unknown as keyof typeof customActions ] = ( payload?: unknown, ...args ) => dispatch( {\n\t\t\tpayload,\n\t\t\ttype,\n\t\t\targs,\n\t\t} as Parameters<typeof ctaReducer<Initial, Actions>>[0]['nextCTAProps'], );\n\n\t\thasCustomAction = true;\n\t}\n\n\tif ( hasCustomAction ) {\n\t\tObject.assign( props.cta, customActions, );\n\t}\n\n\treturn Object.assign( dispatchWrapper, props, ) as unknown as UseCTAReturnTypeDispatch<Initial, Actions, ReturnValue>;\n}\n"],"names":[],"version":3,"file":"createDispatchInterface.9c9f833e.js.map"}