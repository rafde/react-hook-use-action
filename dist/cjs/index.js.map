{"mappings":"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","sources":["src/index.ts","src/internal/usePrivateCTA.ts","src/internal/ctaReducer.ts","src/internal/usePublicCTA.ts"],"sourcesContent":["import usePrivateCTA from './internal/usePrivateCTA';\nimport usePublicCTA from './internal/usePublicCTA';\n\nimport type { CTAInitial, } from './types/CTAInitial';\nimport type { UseCTAParameterActionsRecordProp, } from './types/UseCTAParameterActionsRecordProp';\nimport type { UseCTAParameter, } from './types/UseCTAParameter';\nimport type { UseCTAReturnType, } from './types/UseCTAReturnType';\n\nexport function useCTA<\n\tInitial extends CTAInitial,\n\tActions extends UseCTAParameterActionsRecordProp<Initial> | undefined,\n>(\n\tuseCTAParameter: UseCTAParameter<Initial, Actions>,\n): UseCTAReturnType<Initial, Actions> {\n\tconst stateDispatcher = usePrivateCTA( useCTAParameter, );\n\treturn usePublicCTA( {\n\t\tactions: useCTAParameter.actions,\n\t\tstateDispatcher,\n\t}, );\n}\n\nexport type { CTAInitial, } from './types/CTAInitial';\n\nexport type { CTAParam, } from './types/CTAParam';\n\nexport type { UseCTAParameter, } from './types/UseCTAParameter';\n\nexport type { UseCTAReturnTypeDispatch, } from './types/UseCTAReturnTypeDispatch';\n\nexport type { UseCTAReturnType, } from './types/UseCTAReturnType';\n","import { useReducer, } from 'react';\nimport { UseCTAParameterActionsRecordProp, } from '../types/UseCTAParameterActionsRecordProp';\n\nimport ctaReducer, { CTAReducerState, } from './ctaReducer';\n\nimport type { CTAInitial, } from '../types/CTAInitial';\nimport type { UseCTAParameter, } from '../types/UseCTAParameter';\n\nfunction _init<\n\tInitial extends CTAInitial,\n\tActions extends UseCTAParameterActionsRecordProp<Initial> | undefined,\n>(\n\tprivateCTAState: CTAReducerState<Initial>,\n\tinit?: UseCTAParameter<Initial, Actions>['onInit'],\n): CTAReducerState<Initial> {\n\tconst changesMap = new Map() as CTAReducerState<Initial>['changesMap'];\n\tif ( typeof init !== 'function' ) {\n\t\treturn {\n\t\t\t...privateCTAState,\n\t\t\tchangesMap,\n\t\t};\n\t}\n\n\tconst initial = init( privateCTAState.current, );\n\treturn {\n\t\t...privateCTAState,\n\t\tchangesMap,\n\t\tcurrent: initial,\n\t\tinitial,\n\t};\n}\n\nexport default function usePrivateCTA<\n\tInitial extends CTAInitial,\n\tActions extends UseCTAParameterActionsRecordProp<Initial> | undefined,\n>(\n\tparams: UseCTAParameter<Initial, Actions>,\n) {\n\treturn useReducer(\n\t\tfunction reducerCallback( ctaReducerState: CTAReducerState<Initial>, nextCTAProps: Parameters<typeof ctaReducer<Initial, Actions>>[0]['nextCTAProps'], ) {\n\t\t\treturn ctaReducer( {\n\t\t\t\tctaReducerState,\n\t\t\t\tactions: params.actions,\n\t\t\t\tnextCTAProps,\n\t\t\t}, );\n\t\t},\n\t\t{\n\t\t\tchanges: null,\n\t\t\t// Set changesMap in init to avoid re-instantiating a new Map everytime this is called\n\t\t\tchangesMap: undefined as unknown as CTAReducerState<Initial>['changesMap'],\n\t\t\tcurrent: params.initial,\n\t\t\tinitial: params.initial,\n\t\t\tprevious: params.initial,\n\t\t},\n\t\tfunction _onInit( privateCTAState: CTAReducerState<Initial>, ) {\n\t\t\treturn _init<Initial, Actions>( privateCTAState, params.onInit, );\n\t\t},\n\t);\n}\n\nexport type UsePrivateCTAReturnType<\n\tInitial extends CTAInitial,\n\tActions extends UseCTAParameterActionsRecordProp<Initial> | undefined,\n> = ReturnType<typeof usePrivateCTA<Initial, Actions>>;\n\nexport type UsePrivateCTADispatcher<\n\tInitial extends CTAInitial,\n\tActions extends UseCTAParameterActionsRecordProp<Initial> | undefined,\n> = UsePrivateCTAReturnType<Initial, Actions>[1];\n","import { strictDeepEqual, } from 'fast-equals';\n\nimport type { CTAInitial, } from '../types/CTAInitial';\nimport type { CTAParam, } from '../types/CTAParam';\nimport type { DispatchCTA, UseCTAReturnTypeDispatchState, } from '../types/UseCTAReturnTypeDispatch';\n\nfunction _resetCurrentChangesMap<Initial extends CTAInitial,>(\n\tstate: Initial,\n\tinitial: CTAReducerState<Initial>['initial'],\n\tchangesMap: CTAReducerState<Initial>['changesMap'],\n) {\n\tconst checkedKeys: Record<string, boolean> = {};\n\tchangesMap.clear();\n\n\tfor ( const key in state ) {\n\t\tconst value = state[ key ];\n\t\tcheckedKeys[ key ] = true;\n\n\t\tif ( strictDeepEqual( initial[ key ], value, ) ) {\n\t\t\tchangesMap.delete( key, );\n\t\t\tcontinue;\n\t\t}\n\t\tchangesMap.set( key, value, );\n\t}\n\n\tfor ( const key in initial ) {\n\t\tif ( checkedKeys[ key ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst value = initial[ key ];\n\t\tchangesMap.set( key, value, );\n\t}\n}\n\nfunction _replace<Initial extends CTAInitial,>(\n\tctaReducerState: CTAReducerState<Initial>,\n\tpayload: Initial,\n): CTAReducerState<Initial> {\n\tconst {\n\t\tchangesMap,\n\t} = ctaReducerState;\n\t_resetCurrentChangesMap( payload, ctaReducerState.initial, changesMap, );\n\n\treturn {\n\t\t...ctaReducerState,\n\t\tchanges: changesMap.size ? Object.fromEntries( changesMap, ) as Readonly<Partial<Initial>> : null,\n\t\tcurrent: payload,\n\t\tprevious: ctaReducerState.current,\n\t};\n}\n\nfunction _replaceInitial<Initial extends CTAInitial,>(\n\tctaReducerState: CTAReducerState<Initial>,\n\tinitial: Initial,\n): CTAReducerState<Initial> {\n\tconst {\n\t\tchangesMap,\n\t} = ctaReducerState;\n\t_resetCurrentChangesMap( ctaReducerState.current, initial, ctaReducerState.changesMap, );\n\n\treturn {\n\t\t...ctaReducerState,\n\t\tchanges: changesMap.size ? Object.fromEntries( changesMap, ) as Readonly<Partial<Initial>> : null,\n\t\tinitial,\n\t};\n}\n\nfunction _update<Initial extends CTAInitial,>(\n\tctaReducerState: CTAReducerState<Initial>,\n\tpayload: Partial<Initial>,\n): CTAReducerState<Initial> {\n\tconst current: Record<string, unknown> = {};\n\tlet hasUpdates = false;\n\tconst {\n\t\tcurrent: previous,\n\t\t...rest\n\t} = ctaReducerState;\n\tconst {\n\t\tinitial,\n\t\tchangesMap,\n\t} = ctaReducerState;\n\n\tfor ( const key in payload ) {\n\t\tconst value = payload[ key ];\n\t\tif ( strictDeepEqual( previous[ key as keyof Initial ], value, ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tcurrent[ key ] = value;\n\t\thasUpdates = true;\n\n\t\tif ( strictDeepEqual( initial[ key as keyof Initial ], value, ) ) {\n\t\t\tchangesMap.delete( key, );\n\t\t}\n\t\telse {\n\t\t\tchangesMap.set( key, value, );\n\t\t}\n\t}\n\n\tif ( !hasUpdates ) {\n\t\treturn ctaReducerState;\n\t}\n\n\treturn {\n\t\t...rest,\n\t\tchanges: changesMap.size ? Object.fromEntries( changesMap, ) as Readonly<Partial<Initial>> : null,\n\t\tcurrent: {\n\t\t\t...previous,\n\t\t\t...payload,\n\t\t},\n\t\tprevious,\n\t};\n}\n\nexport type CTAReducerState<Initial extends CTAInitial,> = UseCTAReturnTypeDispatchState<Initial> & {\n\tchangesMap: Map<string | number, unknown>\n};\n\nexport default function ctaReducer<\n\tInitial extends CTAInitial,\n\tActions = undefined,\n>( params: {\n\tctaReducerState: CTAReducerState<Initial>\n\tactions?: Actions\n\tnextCTAProps: Parameters<DispatchCTA<Initial, Actions>>[0]\n}, ): CTAReducerState<Initial> {\n\tconst {\n\t\ttype,\n\t\tpayload,\n\t} = params.nextCTAProps;\n\tconst {\n\t\tctaReducerState,\n\t\tactions,\n\t} = params;\n\tconst {\n\t\tchangesMap,\n\t\tcurrent,\n\t\tinitial,\n\t} = ctaReducerState;\n\t// This can be a custom or overridden action\n\tconst cta = actions?.[ type as keyof typeof actions ];\n\tconst isAction = typeof cta === 'function';\n\n\tconst ctaParam: CTAParam<Initial> = {\n\t\tchanges: ctaReducerState.changes,\n\t\tinitial,\n\t\tprevious: ctaReducerState.previous,\n\t};\n\tlet next = payload;\n\n\tif ( type === 'reset' && !payload ) {\n\t\tchangesMap.clear();\n\n\t\tif ( !isAction ) {\n\t\t\treturn {\n\t\t\t\t...ctaReducerState,\n\t\t\t\tchanges: null,\n\t\t\t\tcurrent: initial,\n\t\t\t\tprevious: current,\n\t\t\t};\n\t\t}\n\n\t\tnext = cta(\n\t\t\tctaParam,\n\t\t);\n\n\t\tif ( typeof next === 'undefined' ) {\n\t\t\treturn ctaReducerState;\n\t\t}\n\n\t\treturn {\n\t\t\t...ctaReducerState,\n\t\t\tchanges: null,\n\t\t\tcurrent: next as Initial,\n\t\t\tprevious: current,\n\t\t};\n\t}\n\n\tif ( payload instanceof Function ) {\n\t\tnext = payload(\n\t\t\tctaParam,\n\t\t);\n\n\t\tif ( typeof next === 'undefined' ) {\n\t\t\treturn ctaReducerState;\n\t\t}\n\t}\n\n\tif ( isAction ) {\n\t\tnext = cta(\n\t\t\tctaParam,\n\t\t\tnext,\n\t\t);\n\t}\n\n\tif ( next && typeof next === 'object' ) {\n\t\tif ( type === 'reset' ) {\n\t\t\tif ( strictDeepEqual( initial, next, ) || strictDeepEqual( current, next, ) ) {\n\t\t\t\treturn ctaReducerState;\n\t\t\t}\n\n\t\t\tchangesMap.clear();\n\t\t\treturn {\n\t\t\t\tchangesMap,\n\t\t\t\tchanges: null,\n\t\t\t\tinitial: next as Initial,\n\t\t\t\tcurrent: next as Initial,\n\t\t\t\tprevious: current,\n\t\t\t};\n\t\t}\n\n\t\tif ( type === 'replace' ) {\n\t\t\treturn _replace(\n\t\t\t\tctaReducerState,\n\t\t\t\tnext as Initial,\n\t\t\t);\n\t\t}\n\n\t\tif ( type === 'replaceInitial' ) {\n\t\t\treturn _replaceInitial(\n\t\t\t\tctaReducerState,\n\t\t\t\tnext as Initial,\n\t\t\t);\n\t\t}\n\n\t\tif ( type === 'update' || isAction ) {\n\t\t\treturn _update(\n\t\t\t\tctaReducerState,\n\t\t\t\tnext,\n\t\t\t);\n\t\t}\n\t}\n\n\treturn ctaReducerState;\n}\n","import { useMemo, } from 'react';\n\nimport type { CTAInitial, } from '../types/CTAInitial';\nimport { UseCTAParameterActionsRecordProp, } from '../types/UseCTAParameterActionsRecordProp';\nimport type { UseCTAReturnType, } from '../types/UseCTAReturnType';\nimport type { DispatchDefaultCTARecord, DispatchCTA, } from '../types/UseCTAReturnTypeDispatch';\nimport type { UsePrivateCTADispatcher, UsePrivateCTAReturnType, } from './usePrivateCTA';\n\nfunction mergeCustomCTAWithDefaultCTA<\n\tInitial extends CTAInitial,\n\tActions,\n>(\n\tdispatch: DispatchCTA<Initial, Actions>,\n\tdefaultCTARecord: DispatchDefaultCTARecord<Initial>,\n\tctaRecord?: Actions,\n) {\n\ttype ActionsRecord = Exclude<Actions, undefined>;\n\ttype CustomActionKeys = Exclude<keyof ActionsRecord, keyof DispatchDefaultCTARecord<Initial>>;\n\tlet hasCustomAction = false;\n\tconst customActions = {} as Record<\n\t\tCustomActionKeys,\n\t\t( payload?: unknown ) => void\n\t>;\n\tfor ( const type in ctaRecord ) {\n\t\tif ( type in defaultCTARecord || typeof ctaRecord[ type ] !== 'function' ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tcustomActions[ type as unknown as keyof typeof customActions ] = ( payload?: unknown, ) => {\n\t\t\tdispatch( {\n\t\t\t\ttype,\n\t\t\t\tpayload,\n\t\t\t} as unknown as Parameters<DispatchCTA<Initial, Actions>>[0], );\n\t\t};\n\n\t\thasCustomAction = true;\n\t}\n\n\tif ( !hasCustomAction ) {\n\t\treturn defaultCTARecord;\n\t}\n\n\treturn Object.assign(\n\t\tdefaultCTARecord,\n\t\tcustomActions,\n\t);\n}\n\nfunction wrapPrivateDispatcher<\n\tInitial extends CTAInitial,\n\tActions extends UseCTAParameterActionsRecordProp<Initial> | undefined = undefined,\n>(\n\tdispatcher: UsePrivateCTADispatcher<Initial, Actions>,\n\tactions?: Actions,\n) {\n\tconst publicDispatcher: DispatchCTA<Initial, Actions> = ( cta, ) => {\n\t\tdispatcher( cta, );\n\t};\n\n\tconst cta: DispatchDefaultCTARecord<Initial> = {\n\t\treplace( payload, ) {\n\t\t\tpublicDispatcher( {\n\t\t\t\ttype: 'replace',\n\t\t\t\tpayload,\n\t\t\t} as Parameters<DispatchCTA<Initial, Actions>>[0], );\n\t\t},\n\t\treplaceInitial( payload, ) {\n\t\t\tpublicDispatcher( {\n\t\t\t\ttype: 'replaceInitial',\n\t\t\t\tpayload,\n\t\t\t} as Parameters<DispatchCTA<Initial, Actions>>[0], );\n\t\t},\n\t\treset( payload, ) {\n\t\t\tpublicDispatcher( {\n\t\t\t\ttype: 'reset',\n\t\t\t\tpayload,\n\t\t\t} as Parameters<DispatchCTA<Initial, Actions>>[0], );\n\t\t},\n\t\tupdate( payload, value, ) {\n\t\t\tswitch ( typeof payload ) {\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'string':\n\t\t\t\t\tpublicDispatcher( {\n\t\t\t\t\t\ttype: 'update',\n\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t[ payload ]: value,\n\t\t\t\t\t\t},\n\t\t\t\t\t} as Parameters<DispatchCTA<Initial, Actions>>[0], );\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tpublicDispatcher( {\n\t\t\t\t\t\ttype: 'update',\n\t\t\t\t\t\tpayload,\n\t\t\t\t\t} as Parameters<DispatchCTA<Initial, Actions>>[0], );\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t};\n\n\tif ( actions == null || typeof actions !== 'object' ) {\n\t\treturn Object.assign(\n\t\t\tpublicDispatcher,\n\t\t\t{\n\t\t\t\tcta,\n\t\t\t},\n\t\t);\n\t}\n\n\treturn Object.assign(\n\t\tpublicDispatcher,\n\t\t{\n\t\t\tcta: mergeCustomCTAWithDefaultCTA( publicDispatcher, cta, actions, ),\n\t\t},\n\t);\n}\n\nexport default function usePublicCTA<\n\tInitial extends CTAInitial,\n\tActions extends UseCTAParameterActionsRecordProp<Initial> | undefined = undefined,\n>( params: {\n\tactions?: Actions\n\tstateDispatcher: UsePrivateCTAReturnType<Initial, Actions>\n}, ): UseCTAReturnType<Initial, Actions> {\n\tconst {\n\t\tactions,\n\t} = params;\n\tconst [\n\t\tctaState,\n\t\tctaDispatch,\n\t] = params.stateDispatcher;\n\n\tconst augmentedDispatcher = useMemo(\n\t\t() => wrapPrivateDispatcher<Initial, Actions>( ctaDispatch, actions, ),\n\t\t[\n\t\t\tactions,\n\t\t\tctaDispatch,\n\t\t],\n\t);\n\n\treturn useMemo(\n\t\t() => {\n\t\t\tconst state: UseCTAReturnType<Initial, Actions>[1]['state'] = {\n\t\t\t\tchanges: ctaState.changes,\n\t\t\t\tcurrent: ctaState.current,\n\t\t\t\tinitial: ctaState.initial,\n\t\t\t\tprevious: ctaState.previous,\n\t\t\t};\n\t\t\tconst dispatch = Object.assign(\n\t\t\t\taugmentedDispatcher,\n\t\t\t\t{\n\t\t\t\t\tstate,\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn [\n\t\t\t\tctaState.current,\n\t\t\t\tdispatch as unknown as UseCTAReturnType<Initial, Actions>[1],\n\t\t\t];\n\t\t},\n\t\t[\n\t\t\tctaState,\n\t\t\taugmentedDispatcher,\n\t\t],\n\t);\n}\n"],"names":[],"version":3,"file":"index.js.map"}