{"mappings":";;;;;;;;;;;AAiBO,MAAM;IAQZ,YAAa,KAA8C,CAAI;QAC9D,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;QACtB,IAAI,CAAC,OAAO,GAAG,MAAM,OAAO;QAC5B,IAAI,CAAC,iBAAiB,GAAG,CAAC,MAAM,kBAAkB,GAC/C;YAAE,YAAY;QAAM,IACpB;YACD,YAAY,CAAC,MAAM,kBAAkB;YACrC,GAAG,OAAO,iBAAiB;QAC5B;IACF;AACD;AAEA,SAAS,0CAA+B,OAAgB,EAAE,IAAuD;IAChH,OAAO,QAAS,WAAW,OAAO,YAAY,YAAY,QAAQ;AACnE;AAEO,MAAM,kDAEH;IACT,YAAa,KAAuH,CAAI;QACvI,KAAK,CAAE;YACN,GAAG,KAAK;YACR,MAAM;QACP;IACD;AACD;AAEO,SAAS,0CAGb,OAAgB;IAClB,MAAM,YAAY,0CAAqB,SAAS;IAEhD,OAAO,SAAS,iBACf,OAAsE,EACtE,iBAAqC;QAErC,OAAO,IAAI,0CAAkC;+BAC5C;YACA,oBAAoB;qBACpB;QACD;IACD;AACD;AAEO,MAAM,kDAEH;IACT,YAAa,KAA+G,CAAI;QAC/H,KAAK,CAAE;YACN,GAAG,KAAK;YACR,MAAM;QACP;IACD;AACD;AAEO,SAAS,0CAGb,OAAgB;IAClB,MAAM,YAAY,0CAAqB,SAAS;IAEhD,OAAO,SAAS,gBACf,OAA+D,EAC/D,iBAAqC;QAErC,OAAO,IAAI,0CAA0B;+BACpC;YACA,oBAAoB;qBACpB;QACD;IACD;AACD;AAEO,MAAM,kDAEH;IACT,YAAa,KAMZ,CAAI;QACJ,KAAK,CAAE;YACN,GAAG,KAAK;YACR,MAAM;QACP;IACD;AACD;AAEO,SAAS,0CAGb,OAAgB;IAClB,MAAM,qBAAqB,0CAAqB,SAAS;IAEzD,OAAO,SAAS,iBACf,OAA+D,EAC/D,iBAAqC;QAErC,OAAO,IAAI,0CAA2B;+BACrC;gCACA;qBACA;QACD;IACD;AACD;AAEO,MAAM,kDAEH;IACT,YAAa,KAMZ,CAAI;QACJ,KAAK,CAAE;YACN,GAAG,KAAK;YACR,MAAM;QACP;IACD;AACD;AAEO,SAAS,0CAGb,OAAgB;IAClB,MAAM,qBAAqB,0CAAqB,SAAS;IAEzD,OAAO,SAAS,kBACf,OAAgE,EAChE,iBAAqC;QAErC,OAAO,IAAI,0CAA4B;+BACtC;gCACA;qBACA;QACD;IACD;AACD;AAEO,MAAM,kDAEH;IACT,YAAa,KAMZ,CAAI;QACJ,KAAK,CAAE;YACN,GAAG,KAAK;YACR,MAAM;QACP;IACD;AACD;AAEO,SAAS,yCAGb,OAAgB;IAClB,MAAM,qBAAqB,0CAAqB,SAAS;IAEzD,OAAO,SAAS,yBACf,OAAuE,EACvE,iBAAqC;QAErC,OAAO,IAAI,0CAAmC;+BAC7C;gCACA;qBACA;QACD;IACD;AACD","sources":["src/internal/ActionTypes.ts"],"sourcesContent":["import { CTAState, } from '../types/CTAState';\nimport { DefaultActionsRecord, } from '../types/DefaultActionsRecord';\n\nexport type ActionTypeOptions = {\n\tuseDefault?: boolean\n};\n\nexport type ActionTypeConstructParam<\n\tPayload extends CTAState,\n\tType extends keyof DefaultActionsRecord<Payload>,\n> = {\n\tactionTypeOptions?: ActionTypeOptions\n\thasAugmentedAction: boolean\n\tpayload: Parameters<DefaultActionsRecord<Payload>[Type]>[1]\n\ttype: Type\n};\n\nexport class ActionType<\n\tPayload extends CTAState,\n\tType extends keyof DefaultActionsRecord<Payload>,\n> {\n\treadonly type: ActionTypeConstructParam<Payload, Type>['type'];\n\treadonly payload: Readonly<ActionTypeConstructParam<Payload, Type>['payload']>;\n\treadonly actionTypeOptions: ActionTypeOptions;\n\n\tconstructor( param: ActionTypeConstructParam<Payload, Type>, ) {\n\t\tthis.type = param.type;\n\t\tthis.payload = param.payload;\n\t\tthis.actionTypeOptions = !param.hasAugmentedAction\n\t\t\t? { useDefault: true, }\n\t\t\t: {\n\t\t\t\tuseDefault: !param.hasAugmentedAction,\n\t\t\t\t...param?.actionTypeOptions,\n\t\t\t};\n\t}\n}\n\nfunction _hasAugmentedAction<Actions,>( actions: Actions, type: keyof DefaultActionsRecord<Record<string, never>>, ) {\n\treturn Boolean( actions && typeof actions === 'object' && type in actions, );\n}\n\nexport class UpdateInitialActionType<\n\tPayload extends CTAState,\n> extends ActionType<Payload, 'updateInitial'> {\n\tconstructor( param: Pick<ActionTypeConstructParam<Payload, 'updateInitial'>, 'actionTypeOptions' | 'payload' | 'hasAugmentedAction'>, ) {\n\t\tsuper( {\n\t\t\t...param,\n\t\t\ttype: 'updateInitial',\n\t\t}, );\n\t}\n}\n\nexport function createUpdateInitialActionType<\n\tPayload extends CTAState,\n\tActions,\n>( actions: Actions, ) {\n\tconst hasAction = _hasAugmentedAction( actions, 'updateInitial', );\n\n\treturn function updateActionType(\n\t\tpayload: ActionTypeConstructParam<Payload, 'updateInitial'>['payload'],\n\t\tactionTypeOptions?: ActionTypeOptions,\n\t) {\n\t\treturn new UpdateInitialActionType<Payload>( {\n\t\t\tactionTypeOptions,\n\t\t\thasAugmentedAction: hasAction,\n\t\t\tpayload,\n\t\t}, );\n\t};\n}\n\nexport class ResetActionType<\n\tPayload extends CTAState,\n> extends ActionType<Payload, 'reset'> {\n\tconstructor( param: Pick<ActionTypeConstructParam<Payload, 'reset'>, 'actionTypeOptions' | 'payload' | 'hasAugmentedAction'>, ) {\n\t\tsuper( {\n\t\t\t...param,\n\t\t\ttype: 'reset',\n\t\t}, );\n\t}\n}\n\nexport function createResetActionType<\n\tPayload extends CTAState,\n\tActions,\n>( actions: Actions, ) {\n\tconst hasAction = _hasAugmentedAction( actions, 'reset', );\n\n\treturn function resetActionType(\n\t\tpayload?: ActionTypeConstructParam<Payload, 'reset'>['payload'],\n\t\tactionTypeOptions?: ActionTypeOptions,\n\t) {\n\t\treturn new ResetActionType<Payload>( {\n\t\t\tactionTypeOptions,\n\t\t\thasAugmentedAction: hasAction,\n\t\t\tpayload,\n\t\t}, );\n\t};\n}\n\nexport class UpdateActionType<\n\tPayload extends CTAState,\n> extends ActionType<Payload, 'update'> {\n\tconstructor( param: Pick<\n\t\tActionTypeConstructParam<\n\t\t\tPayload,\n\t\t\t'update'\n\t\t>,\n\t\t'actionTypeOptions' | 'payload' | 'hasAugmentedAction'\n\t>, ) {\n\t\tsuper( {\n\t\t\t...param,\n\t\t\ttype: 'update',\n\t\t}, );\n\t}\n}\n\nexport function createUpdateActionType<\n\tPayload extends CTAState,\n\tActions,\n>( actions: Actions, ) {\n\tconst hasAugmentedAction = _hasAugmentedAction( actions, 'update', );\n\n\treturn function updateActionType(\n\t\tpayload: ActionTypeConstructParam<Payload, 'update'>['payload'],\n\t\tactionTypeOptions?: ActionTypeOptions,\n\t) {\n\t\treturn new UpdateActionType<Payload>( {\n\t\t\tactionTypeOptions,\n\t\t\thasAugmentedAction,\n\t\t\tpayload,\n\t\t}, );\n\t};\n}\n\nexport class ReplaceActionType<\n\tPayload extends CTAState,\n> extends ActionType<Payload, 'replace'> {\n\tconstructor( param: Pick<\n\t\tActionTypeConstructParam<\n\t\t\tPayload,\n\t\t\t'replace'\n\t\t>,\n\t\t'actionTypeOptions' | 'payload' | 'hasAugmentedAction'\n\t>, ) {\n\t\tsuper( {\n\t\t\t...param,\n\t\t\ttype: 'replace',\n\t\t}, );\n\t}\n}\n\nexport function createReplaceActionType<\n\tPayload extends CTAState,\n\tActions,\n>( actions: Actions, ) {\n\tconst hasAugmentedAction = _hasAugmentedAction( actions, 'replace', );\n\n\treturn function replaceActionType(\n\t\tpayload: ActionTypeConstructParam<Payload, 'replace'>['payload'],\n\t\tactionTypeOptions?: ActionTypeOptions,\n\t) {\n\t\treturn new ReplaceActionType<Payload>( {\n\t\t\tactionTypeOptions,\n\t\t\thasAugmentedAction,\n\t\t\tpayload,\n\t\t}, );\n\t};\n}\n\nexport class ReplaceInitialActionType<\n\tPayload extends CTAState,\n> extends ActionType<Payload, 'replaceInitial'> {\n\tconstructor( param: Pick<\n\t\tActionTypeConstructParam<\n\t\t\tPayload,\n\t\t\t'replaceInitial'\n\t\t>,\n\t\t'actionTypeOptions' | 'payload' | 'hasAugmentedAction'\n\t>, ) {\n\t\tsuper( {\n\t\t\t...param,\n\t\t\ttype: 'replaceInitial',\n\t\t}, );\n\t}\n}\n\nexport function createReplaceInitialActionType<\n\tPayload extends CTAState,\n\tActions,\n>( actions: Actions, ) {\n\tconst hasAugmentedAction = _hasAugmentedAction( actions, 'replaceInitial', );\n\n\treturn function replaceInitialActionType(\n\t\tpayload: ActionTypeConstructParam<Payload, 'replaceInitial'>['payload'],\n\t\tactionTypeOptions?: ActionTypeOptions,\n\t) {\n\t\treturn new ReplaceInitialActionType<Payload>( {\n\t\t\tactionTypeOptions,\n\t\t\thasAugmentedAction,\n\t\t\tpayload,\n\t\t}, );\n\t};\n}\n"],"names":[],"version":3,"file":"ActionTypes.fcf12c19.js.map"}